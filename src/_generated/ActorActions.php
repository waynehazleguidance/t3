<?php  //[STAMP] ca9efa75aa3d15b427041f58392081a1
namespace Guidance\Tests\Project\_generated;

// This class was automatically generated by build task
// You should not change it manually as it will be overwritten on next build
// @codingStandardsIgnoreFile

trait ActorActions
{
    /**
     * @return \Codeception\Scenario
     */
    abstract protected function getScenario();

    
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Print out latest Selenium Logs in debug mode
     *
     * @param \Codeception\TestInterface $test
     * @see \Codeception\Module\WebDriver::debugWebDriverLogs()
     */
    public function debugWebDriverLogs($test = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('debugWebDriverLogs', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Print out latest Selenium Logs in debug mode
     *
     * @param \Codeception\TestInterface $test
     * @see \Codeception\Module\WebDriver::debugWebDriverLogs()
     */
    public function tryToDebugWebDriverLogs($test = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('debugWebDriverLogs', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes debugWebDriverLogs and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\WebDriver::debugWebDriverLogs()
     */
    public function retryDebugWebDriverLogs($test = null) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('debugWebDriverLogs', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Changes the subdomain for the 'url' configuration parameter.
     * Does not open a page; use `amOnPage` for that.
     *
     * ``` php
     * <?php
     * // If config is: 'http://mysite.com'
     * // or config is: 'http://www.mysite.com'
     * // or config is: 'http://company.mysite.com'
     *
     * $I->amOnSubdomain('user');
     * $I->amOnPage('/');
     * // moves to http://user.mysite.com/
     * ?>
     * ```
     *
     * @param $subdomain
     *
     * @return mixed
     * @see \Codeception\Module\WebDriver::amOnSubdomain()
     */
    public function amOnSubdomain($subdomain) {
        return $this->getScenario()->runStep(new \Codeception\Step\Condition('amOnSubdomain', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Takes a screenshot of the current window and saves it to `tests/_output/debug`.
     *
     * ``` php
     * <?php
     * $I->amOnPage('/user/edit');
     * $I->makeScreenshot('edit_page');
     * // saved to: tests/_output/debug/edit_page.png
     * $I->makeScreenshot();
     * // saved to: tests/_output/debug/2017-05-26_14-24-11_4b3403665fea6.png
     * ```
     *
     * @param $name
     * @see \Codeception\Module\WebDriver::makeScreenshot()
     */
    public function makeScreenshot($name = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('makeScreenshot', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Takes a screenshot of the current window and saves it to `tests/_output/debug`.
     *
     * ``` php
     * <?php
     * $I->amOnPage('/user/edit');
     * $I->makeScreenshot('edit_page');
     * // saved to: tests/_output/debug/edit_page.png
     * $I->makeScreenshot();
     * // saved to: tests/_output/debug/2017-05-26_14-24-11_4b3403665fea6.png
     * ```
     *
     * @param $name
     * @see \Codeception\Module\WebDriver::makeScreenshot()
     */
    public function tryToMakeScreenshot($name = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('makeScreenshot', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes makeScreenshot and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\WebDriver::makeScreenshot()
     */
    public function retryMakeScreenshot($name = null) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('makeScreenshot', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Saves current page's HTML into a temprary file.
     * Use this method in debug mode within an interactive pause to get a source code of current page.
     *
     * ```php
     * <?php
     * $I->makeHtmlSnapshot('edit_page');
     * // saved to: tests/_output/debug/edit_page.html
     * $I->makeHtmlSnapshot();
     * // saved to: tests/_output/debug/2017-05-26_14-24-11_4b3403665fea6.html
     * ```
     *
     * @param null $name
     * @see \Codeception\Module\WebDriver::makeHtmlSnapshot()
     */
    public function makeHtmlSnapshot($name = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('makeHtmlSnapshot', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Saves current page's HTML into a temprary file.
     * Use this method in debug mode within an interactive pause to get a source code of current page.
     *
     * ```php
     * <?php
     * $I->makeHtmlSnapshot('edit_page');
     * // saved to: tests/_output/debug/edit_page.html
     * $I->makeHtmlSnapshot();
     * // saved to: tests/_output/debug/2017-05-26_14-24-11_4b3403665fea6.html
     * ```
     *
     * @param null $name
     * @see \Codeception\Module\WebDriver::makeHtmlSnapshot()
     */
    public function tryToMakeHtmlSnapshot($name = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('makeHtmlSnapshot', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes makeHtmlSnapshot and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\WebDriver::makeHtmlSnapshot()
     */
    public function retryMakeHtmlSnapshot($name = null) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('makeHtmlSnapshot', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Resize the current window.
     *
     * ``` php
     * <?php
     * $I->resizeWindow(800, 600);
     *
     * ```
     *
     * @param int $width
     * @param int $height
     * @see \Codeception\Module\WebDriver::resizeWindow()
     */
    public function resizeWindow($width, $height) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('resizeWindow', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Resize the current window.
     *
     * ``` php
     * <?php
     * $I->resizeWindow(800, 600);
     *
     * ```
     *
     * @param int $width
     * @param int $height
     * @see \Codeception\Module\WebDriver::resizeWindow()
     */
    public function tryToResizeWindow($width, $height) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('resizeWindow', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes resizeWindow and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\WebDriver::resizeWindow()
     */
    public function retryResizeWindow($width, $height) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('resizeWindow', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that a cookie with the given name is set.
     * You can set additional cookie params like `domain`, `path` as array passed in last argument.
     *
     * ``` php
     * <?php
     * $I->seeCookie('PHPSESSID');
     * ?>
     * ```
     *
     * @param $cookie
     * @param array $params
     * @return mixed
     * @see \Codeception\Module\WebDriver::seeCookie()
     */
    public function seeCookie($cookie, $params = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeCookie', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Checks that a cookie with the given name is set.
     * You can set additional cookie params like `domain`, `path` as array passed in last argument.
     *
     * ``` php
     * <?php
     * $I->seeCookie('PHPSESSID');
     * ?>
     * ```
     *
     * @param $cookie
     * @param array $params
     * @return mixed
     * @see \Codeception\Module\WebDriver::seeCookie()
     */
    public function tryToSeeCookie($cookie, $params = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('seeCookie', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes seeCookie and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\WebDriver::seeCookie()
     */
    public function retrySeeCookie($cookie, $params = null) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('seeCookie', func_get_args(), $retryNum, $retryInterval));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks that a cookie with the given name is set.
     * You can set additional cookie params like `domain`, `path` as array passed in last argument.
     *
     * ``` php
     * <?php
     * $I->seeCookie('PHPSESSID');
     * ?>
     * ```
     *
     * @param $cookie
     * @param array $params
     * @return mixed
     * @see \Codeception\Module\WebDriver::seeCookie()
     */
    public function canSeeCookie($cookie, $params = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeCookie', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that there isn't a cookie with the given name.
     * You can set additional cookie params like `domain`, `path` as array passed in last argument.
     *
     * @param $cookie
     *
     * @param array $params
     * @return mixed
     * @see \Codeception\Module\WebDriver::dontSeeCookie()
     */
    public function dontSeeCookie($cookie, $params = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('dontSeeCookie', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Checks that there isn't a cookie with the given name.
     * You can set additional cookie params like `domain`, `path` as array passed in last argument.
     *
     * @param $cookie
     *
     * @param array $params
     * @return mixed
     * @see \Codeception\Module\WebDriver::dontSeeCookie()
     */
    public function tryToDontSeeCookie($cookie, $params = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('dontSeeCookie', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes dontSeeCookie and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\WebDriver::dontSeeCookie()
     */
    public function retryDontSeeCookie($cookie, $params = null) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('dontSeeCookie', func_get_args(), $retryNum, $retryInterval));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks that there isn't a cookie with the given name.
     * You can set additional cookie params like `domain`, `path` as array passed in last argument.
     *
     * @param $cookie
     *
     * @param array $params
     * @return mixed
     * @see \Codeception\Module\WebDriver::dontSeeCookie()
     */
    public function cantSeeCookie($cookie, $params = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('dontSeeCookie', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Sets a cookie with the given name and value.
     * You can set additional cookie params like `domain`, `path`, `expires`, `secure` in array passed as last argument.
     *
     * ``` php
     * <?php
     * $I->setCookie('PHPSESSID', 'el4ukv0kqbvoirg7nkp4dncpk3');
     * ?>
     * ```
     *
     * @param $name
     * @param $val
     * @param array $params
     *
     * @return mixed
     * @see \Codeception\Module\WebDriver::setCookie()
     */
    public function setCookie($cookie, $value, $params = null, $showDebug = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('setCookie', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Sets a cookie with the given name and value.
     * You can set additional cookie params like `domain`, `path`, `expires`, `secure` in array passed as last argument.
     *
     * ``` php
     * <?php
     * $I->setCookie('PHPSESSID', 'el4ukv0kqbvoirg7nkp4dncpk3');
     * ?>
     * ```
     *
     * @param $name
     * @param $val
     * @param array $params
     *
     * @return mixed
     * @see \Codeception\Module\WebDriver::setCookie()
     */
    public function tryToSetCookie($cookie, $value, $params = null, $showDebug = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('setCookie', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes setCookie and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\WebDriver::setCookie()
     */
    public function retrySetCookie($cookie, $value, $params = null, $showDebug = null) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('setCookie', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Unsets cookie with the given name.
     * You can set additional cookie params like `domain`, `path` in array passed as last argument.
     *
     * @param $cookie
     *
     * @param array $params
     * @return mixed
     * @see \Codeception\Module\WebDriver::resetCookie()
     */
    public function resetCookie($cookie, $params = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('resetCookie', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Unsets cookie with the given name.
     * You can set additional cookie params like `domain`, `path` in array passed as last argument.
     *
     * @param $cookie
     *
     * @param array $params
     * @return mixed
     * @see \Codeception\Module\WebDriver::resetCookie()
     */
    public function tryToResetCookie($cookie, $params = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('resetCookie', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes resetCookie and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\WebDriver::resetCookie()
     */
    public function retryResetCookie($cookie, $params = null) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('resetCookie', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Grabs a cookie value.
     * You can set additional cookie params like `domain`, `path` in array passed as last argument.
     *
     * @param $cookie
     *
     * @param array $params
     * @return mixed
     * @see \Codeception\Module\WebDriver::grabCookie()
     */
    public function grabCookie($cookie, $params = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('grabCookie', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes grabCookie and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\WebDriver::grabCookie()
     */
    public function retryGrabCookie($cookie, $params = null) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('grabCookie', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Grabs current page source code.
     *
     * @throws ModuleException if no page was opened.
     *
     * @return string Current page source code.
     * @see \Codeception\Module\WebDriver::grabPageSource()
     */
    public function grabPageSource() {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('grabPageSource', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes grabPageSource and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\WebDriver::grabPageSource()
     */
    public function retryGrabPageSource() {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('grabPageSource', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Open web page at the given absolute URL and sets its hostname as the base host.
     *
     * ``` php
     * <?php
     * $I->amOnUrl('http://codeception.com');
     * $I->amOnPage('/quickstart'); // moves to http://codeception.com/quickstart
     * ?>
     * ```
     * @see \Codeception\Module\WebDriver::amOnUrl()
     */
    public function amOnUrl($url) {
        return $this->getScenario()->runStep(new \Codeception\Step\Condition('amOnUrl', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Opens the page for the given relative URI.
     *
     * ``` php
     * <?php
     * // opens front page
     * $I->amOnPage('/');
     * // opens /register page
     * $I->amOnPage('/register');
     * ```
     *
     * @param string $page
     * @see \Codeception\Module\WebDriver::amOnPage()
     */
    public function amOnPage($page) {
        return $this->getScenario()->runStep(new \Codeception\Step\Condition('amOnPage', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that the current page contains the given string (case insensitive).
     *
     * You can specify a specific HTML element (via CSS or XPath) as the second
     * parameter to only search within that element.
     *
     * ``` php
     * <?php
     * $I->see('Logout');                        // I can suppose user is logged in
     * $I->see('Sign Up', 'h1');                 // I can suppose it's a signup page
     * $I->see('Sign Up', '//body/h1');          // with XPath
     * $I->see('Sign Up', ['css' => 'body h1']); // with strict CSS locator
     * ```
     *
     * Note that the search is done after stripping all HTML tags from the body,
     * so `$I->see('strong')` will return true for strings like:
     *
     *   - `<p>I am Stronger than thou</p>`
     *   - `<script>document.createElement('strong');</script>`
     *
     * But will *not* be true for strings like:
     *
     *   - `<strong>Home</strong>`
     *   - `<div class="strong">Home</strong>`
     *   - `<!-- strong -->`
     *
     * For checking the raw source code, use `seeInSource()`.
     *
     * @param string $text
     * @param array|string $selector optional
     * @see \Codeception\Module\WebDriver::see()
     */
    public function see($text, $selector = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Assertion('see', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Checks that the current page contains the given string (case insensitive).
     *
     * You can specify a specific HTML element (via CSS or XPath) as the second
     * parameter to only search within that element.
     *
     * ``` php
     * <?php
     * $I->see('Logout');                        // I can suppose user is logged in
     * $I->see('Sign Up', 'h1');                 // I can suppose it's a signup page
     * $I->see('Sign Up', '//body/h1');          // with XPath
     * $I->see('Sign Up', ['css' => 'body h1']); // with strict CSS locator
     * ```
     *
     * Note that the search is done after stripping all HTML tags from the body,
     * so `$I->see('strong')` will return true for strings like:
     *
     *   - `<p>I am Stronger than thou</p>`
     *   - `<script>document.createElement('strong');</script>`
     *
     * But will *not* be true for strings like:
     *
     *   - `<strong>Home</strong>`
     *   - `<div class="strong">Home</strong>`
     *   - `<!-- strong -->`
     *
     * For checking the raw source code, use `seeInSource()`.
     *
     * @param string $text
     * @param array|string $selector optional
     * @see \Codeception\Module\WebDriver::see()
     */
    public function tryToSee($text, $selector = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('see', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes see and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\WebDriver::see()
     */
    public function retrySee($text, $selector = null) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('see', func_get_args(), $retryNum, $retryInterval));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks that the current page contains the given string (case insensitive).
     *
     * You can specify a specific HTML element (via CSS or XPath) as the second
     * parameter to only search within that element.
     *
     * ``` php
     * <?php
     * $I->see('Logout');                        // I can suppose user is logged in
     * $I->see('Sign Up', 'h1');                 // I can suppose it's a signup page
     * $I->see('Sign Up', '//body/h1');          // with XPath
     * $I->see('Sign Up', ['css' => 'body h1']); // with strict CSS locator
     * ```
     *
     * Note that the search is done after stripping all HTML tags from the body,
     * so `$I->see('strong')` will return true for strings like:
     *
     *   - `<p>I am Stronger than thou</p>`
     *   - `<script>document.createElement('strong');</script>`
     *
     * But will *not* be true for strings like:
     *
     *   - `<strong>Home</strong>`
     *   - `<div class="strong">Home</strong>`
     *   - `<!-- strong -->`
     *
     * For checking the raw source code, use `seeInSource()`.
     *
     * @param string $text
     * @param array|string $selector optional
     * @see \Codeception\Module\WebDriver::see()
     */
    public function canSee($text, $selector = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('see', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that the current page doesn't contain the text specified (case insensitive).
     * Give a locator as the second parameter to match a specific region.
     *
     * ```php
     * <?php
     * $I->dontSee('Login');                         // I can suppose user is already logged in
     * $I->dontSee('Sign Up','h1');                  // I can suppose it's not a signup page
     * $I->dontSee('Sign Up','//body/h1');           // with XPath
     * $I->dontSee('Sign Up', ['css' => 'body h1']); // with strict CSS locator
     * ```
     *
     * Note that the search is done after stripping all HTML tags from the body,
     * so `$I->dontSee('strong')` will fail on strings like:
     *
     *   - `<p>I am Stronger than thou</p>`
     *   - `<script>document.createElement('strong');</script>`
     *
     * But will ignore strings like:
     *
     *   - `<strong>Home</strong>`
     *   - `<div class="strong">Home</strong>`
     *   - `<!-- strong -->`
     *
     * For checking the raw source code, use `seeInSource()`.
     *
     * @param string $text
     * @param array|string $selector optional
     * @see \Codeception\Module\WebDriver::dontSee()
     */
    public function dontSee($text, $selector = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('dontSee', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Checks that the current page doesn't contain the text specified (case insensitive).
     * Give a locator as the second parameter to match a specific region.
     *
     * ```php
     * <?php
     * $I->dontSee('Login');                         // I can suppose user is already logged in
     * $I->dontSee('Sign Up','h1');                  // I can suppose it's not a signup page
     * $I->dontSee('Sign Up','//body/h1');           // with XPath
     * $I->dontSee('Sign Up', ['css' => 'body h1']); // with strict CSS locator
     * ```
     *
     * Note that the search is done after stripping all HTML tags from the body,
     * so `$I->dontSee('strong')` will fail on strings like:
     *
     *   - `<p>I am Stronger than thou</p>`
     *   - `<script>document.createElement('strong');</script>`
     *
     * But will ignore strings like:
     *
     *   - `<strong>Home</strong>`
     *   - `<div class="strong">Home</strong>`
     *   - `<!-- strong -->`
     *
     * For checking the raw source code, use `seeInSource()`.
     *
     * @param string $text
     * @param array|string $selector optional
     * @see \Codeception\Module\WebDriver::dontSee()
     */
    public function tryToDontSee($text, $selector = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('dontSee', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes dontSee and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\WebDriver::dontSee()
     */
    public function retryDontSee($text, $selector = null) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('dontSee', func_get_args(), $retryNum, $retryInterval));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks that the current page doesn't contain the text specified (case insensitive).
     * Give a locator as the second parameter to match a specific region.
     *
     * ```php
     * <?php
     * $I->dontSee('Login');                         // I can suppose user is already logged in
     * $I->dontSee('Sign Up','h1');                  // I can suppose it's not a signup page
     * $I->dontSee('Sign Up','//body/h1');           // with XPath
     * $I->dontSee('Sign Up', ['css' => 'body h1']); // with strict CSS locator
     * ```
     *
     * Note that the search is done after stripping all HTML tags from the body,
     * so `$I->dontSee('strong')` will fail on strings like:
     *
     *   - `<p>I am Stronger than thou</p>`
     *   - `<script>document.createElement('strong');</script>`
     *
     * But will ignore strings like:
     *
     *   - `<strong>Home</strong>`
     *   - `<div class="strong">Home</strong>`
     *   - `<!-- strong -->`
     *
     * For checking the raw source code, use `seeInSource()`.
     *
     * @param string $text
     * @param array|string $selector optional
     * @see \Codeception\Module\WebDriver::dontSee()
     */
    public function cantSee($text, $selector = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('dontSee', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that the current page contains the given string in its
     * raw source code.
     *
     * ``` php
     * <?php
     * $I->seeInSource('<h1>Green eggs &amp; ham</h1>');
     * ```
     *
     * @param      $raw
     * @see \Codeception\Module\WebDriver::seeInSource()
     */
    public function seeInSource($raw) {
        return $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeInSource', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Checks that the current page contains the given string in its
     * raw source code.
     *
     * ``` php
     * <?php
     * $I->seeInSource('<h1>Green eggs &amp; ham</h1>');
     * ```
     *
     * @param      $raw
     * @see \Codeception\Module\WebDriver::seeInSource()
     */
    public function tryToSeeInSource($raw) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('seeInSource', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes seeInSource and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\WebDriver::seeInSource()
     */
    public function retrySeeInSource($raw) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('seeInSource', func_get_args(), $retryNum, $retryInterval));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks that the current page contains the given string in its
     * raw source code.
     *
     * ``` php
     * <?php
     * $I->seeInSource('<h1>Green eggs &amp; ham</h1>');
     * ```
     *
     * @param      $raw
     * @see \Codeception\Module\WebDriver::seeInSource()
     */
    public function canSeeInSource($raw) {
        return $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeInSource', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that the current page contains the given string in its
     * raw source code.
     *
     * ```php
     * <?php
     * $I->dontSeeInSource('<h1>Green eggs &amp; ham</h1>');
     * ```
     *
     * @param      $raw
     * @see \Codeception\Module\WebDriver::dontSeeInSource()
     */
    public function dontSeeInSource($raw) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('dontSeeInSource', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Checks that the current page contains the given string in its
     * raw source code.
     *
     * ```php
     * <?php
     * $I->dontSeeInSource('<h1>Green eggs &amp; ham</h1>');
     * ```
     *
     * @param      $raw
     * @see \Codeception\Module\WebDriver::dontSeeInSource()
     */
    public function tryToDontSeeInSource($raw) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('dontSeeInSource', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes dontSeeInSource and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\WebDriver::dontSeeInSource()
     */
    public function retryDontSeeInSource($raw) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('dontSeeInSource', func_get_args(), $retryNum, $retryInterval));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks that the current page contains the given string in its
     * raw source code.
     *
     * ```php
     * <?php
     * $I->dontSeeInSource('<h1>Green eggs &amp; ham</h1>');
     * ```
     *
     * @param      $raw
     * @see \Codeception\Module\WebDriver::dontSeeInSource()
     */
    public function cantSeeInSource($raw) {
        return $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('dontSeeInSource', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that the page source contains the given string.
     *
     * ```php
     * <?php
     * $I->seeInPageSource('<link rel="apple-touch-icon"');
     * ```
     *
     * @param $text
     * @see \Codeception\Module\WebDriver::seeInPageSource()
     */
    public function seeInPageSource($text) {
        return $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeInPageSource', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Checks that the page source contains the given string.
     *
     * ```php
     * <?php
     * $I->seeInPageSource('<link rel="apple-touch-icon"');
     * ```
     *
     * @param $text
     * @see \Codeception\Module\WebDriver::seeInPageSource()
     */
    public function tryToSeeInPageSource($text) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('seeInPageSource', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes seeInPageSource and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\WebDriver::seeInPageSource()
     */
    public function retrySeeInPageSource($text) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('seeInPageSource', func_get_args(), $retryNum, $retryInterval));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks that the page source contains the given string.
     *
     * ```php
     * <?php
     * $I->seeInPageSource('<link rel="apple-touch-icon"');
     * ```
     *
     * @param $text
     * @see \Codeception\Module\WebDriver::seeInPageSource()
     */
    public function canSeeInPageSource($text) {
        return $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeInPageSource', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that the page source doesn't contain the given string.
     *
     * @param $text
     * @see \Codeception\Module\WebDriver::dontSeeInPageSource()
     */
    public function dontSeeInPageSource($text) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('dontSeeInPageSource', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Checks that the page source doesn't contain the given string.
     *
     * @param $text
     * @see \Codeception\Module\WebDriver::dontSeeInPageSource()
     */
    public function tryToDontSeeInPageSource($text) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('dontSeeInPageSource', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes dontSeeInPageSource and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\WebDriver::dontSeeInPageSource()
     */
    public function retryDontSeeInPageSource($text) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('dontSeeInPageSource', func_get_args(), $retryNum, $retryInterval));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks that the page source doesn't contain the given string.
     *
     * @param $text
     * @see \Codeception\Module\WebDriver::dontSeeInPageSource()
     */
    public function cantSeeInPageSource($text) {
        return $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('dontSeeInPageSource', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     *
     * @see \Guidance\Tests\Project\Actor\Helper\Common::click()
     */
    public function click($link, $context = null): void {
        $this->getScenario()->runStep(new \Codeception\Step\Action('click', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     *
     * @see \Guidance\Tests\Project\Actor\Helper\Common::click()
     */
    public function tryToClick($link, $context = null): void {
        $this->getScenario()->runStep(new \Codeception\Step\TryTo('click', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes click and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Guidance\Tests\Project\Actor\Helper\Common::click()
     */
    public function retryClick($link, $context = null) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('click', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that there's a link with the specified text.
     * Give a full URL as the second parameter to match links with that exact URL.
     *
     * ``` php
     * <?php
     * $I->seeLink('Logout'); // matches <a href="#">Logout</a>
     * $I->seeLink('Logout','/logout'); // matches <a href="/logout">Logout</a>
     * ?>
     * ```
     *
     * @param string $text
     * @param string $url optional
     * @see \Codeception\Module\WebDriver::seeLink()
     */
    public function seeLink($text, $url = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeLink', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Checks that there's a link with the specified text.
     * Give a full URL as the second parameter to match links with that exact URL.
     *
     * ``` php
     * <?php
     * $I->seeLink('Logout'); // matches <a href="#">Logout</a>
     * $I->seeLink('Logout','/logout'); // matches <a href="/logout">Logout</a>
     * ?>
     * ```
     *
     * @param string $text
     * @param string $url optional
     * @see \Codeception\Module\WebDriver::seeLink()
     */
    public function tryToSeeLink($text, $url = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('seeLink', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes seeLink and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\WebDriver::seeLink()
     */
    public function retrySeeLink($text, $url = null) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('seeLink', func_get_args(), $retryNum, $retryInterval));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks that there's a link with the specified text.
     * Give a full URL as the second parameter to match links with that exact URL.
     *
     * ``` php
     * <?php
     * $I->seeLink('Logout'); // matches <a href="#">Logout</a>
     * $I->seeLink('Logout','/logout'); // matches <a href="/logout">Logout</a>
     * ?>
     * ```
     *
     * @param string $text
     * @param string $url optional
     * @see \Codeception\Module\WebDriver::seeLink()
     */
    public function canSeeLink($text, $url = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeLink', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that the page doesn't contain a link with the given string.
     * If the second parameter is given, only links with a matching "href" attribute will be checked.
     *
     * ``` php
     * <?php
     * $I->dontSeeLink('Logout'); // I suppose user is not logged in
     * $I->dontSeeLink('Checkout now', '/store/cart.php');
     * ?>
     * ```
     *
     * @param string $text
     * @param string $url optional
     * @see \Codeception\Module\WebDriver::dontSeeLink()
     */
    public function dontSeeLink($text, $url = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('dontSeeLink', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Checks that the page doesn't contain a link with the given string.
     * If the second parameter is given, only links with a matching "href" attribute will be checked.
     *
     * ``` php
     * <?php
     * $I->dontSeeLink('Logout'); // I suppose user is not logged in
     * $I->dontSeeLink('Checkout now', '/store/cart.php');
     * ?>
     * ```
     *
     * @param string $text
     * @param string $url optional
     * @see \Codeception\Module\WebDriver::dontSeeLink()
     */
    public function tryToDontSeeLink($text, $url = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('dontSeeLink', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes dontSeeLink and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\WebDriver::dontSeeLink()
     */
    public function retryDontSeeLink($text, $url = null) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('dontSeeLink', func_get_args(), $retryNum, $retryInterval));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks that the page doesn't contain a link with the given string.
     * If the second parameter is given, only links with a matching "href" attribute will be checked.
     *
     * ``` php
     * <?php
     * $I->dontSeeLink('Logout'); // I suppose user is not logged in
     * $I->dontSeeLink('Checkout now', '/store/cart.php');
     * ?>
     * ```
     *
     * @param string $text
     * @param string $url optional
     * @see \Codeception\Module\WebDriver::dontSeeLink()
     */
    public function cantSeeLink($text, $url = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('dontSeeLink', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that current URI contains the given string.
     *
     * ``` php
     * <?php
     * // to match: /home/dashboard
     * $I->seeInCurrentUrl('home');
     * // to match: /users/1
     * $I->seeInCurrentUrl('/users/');
     * ?>
     * ```
     *
     * @param string $uri
     * @see \Codeception\Module\WebDriver::seeInCurrentUrl()
     */
    public function seeInCurrentUrl($uri) {
        return $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeInCurrentUrl', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Checks that current URI contains the given string.
     *
     * ``` php
     * <?php
     * // to match: /home/dashboard
     * $I->seeInCurrentUrl('home');
     * // to match: /users/1
     * $I->seeInCurrentUrl('/users/');
     * ?>
     * ```
     *
     * @param string $uri
     * @see \Codeception\Module\WebDriver::seeInCurrentUrl()
     */
    public function tryToSeeInCurrentUrl($uri) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('seeInCurrentUrl', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes seeInCurrentUrl and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\WebDriver::seeInCurrentUrl()
     */
    public function retrySeeInCurrentUrl($uri) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('seeInCurrentUrl', func_get_args(), $retryNum, $retryInterval));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks that current URI contains the given string.
     *
     * ``` php
     * <?php
     * // to match: /home/dashboard
     * $I->seeInCurrentUrl('home');
     * // to match: /users/1
     * $I->seeInCurrentUrl('/users/');
     * ?>
     * ```
     *
     * @param string $uri
     * @see \Codeception\Module\WebDriver::seeInCurrentUrl()
     */
    public function canSeeInCurrentUrl($uri) {
        return $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeInCurrentUrl', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that the current URL is equal to the given string.
     * Unlike `seeInCurrentUrl`, this only matches the full URL.
     *
     * ``` php
     * <?php
     * // to match root url
     * $I->seeCurrentUrlEquals('/');
     * ?>
     * ```
     *
     * @param string $uri
     * @see \Codeception\Module\WebDriver::seeCurrentUrlEquals()
     */
    public function seeCurrentUrlEquals($uri) {
        return $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeCurrentUrlEquals', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Checks that the current URL is equal to the given string.
     * Unlike `seeInCurrentUrl`, this only matches the full URL.
     *
     * ``` php
     * <?php
     * // to match root url
     * $I->seeCurrentUrlEquals('/');
     * ?>
     * ```
     *
     * @param string $uri
     * @see \Codeception\Module\WebDriver::seeCurrentUrlEquals()
     */
    public function tryToSeeCurrentUrlEquals($uri) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('seeCurrentUrlEquals', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes seeCurrentUrlEquals and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\WebDriver::seeCurrentUrlEquals()
     */
    public function retrySeeCurrentUrlEquals($uri) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('seeCurrentUrlEquals', func_get_args(), $retryNum, $retryInterval));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks that the current URL is equal to the given string.
     * Unlike `seeInCurrentUrl`, this only matches the full URL.
     *
     * ``` php
     * <?php
     * // to match root url
     * $I->seeCurrentUrlEquals('/');
     * ?>
     * ```
     *
     * @param string $uri
     * @see \Codeception\Module\WebDriver::seeCurrentUrlEquals()
     */
    public function canSeeCurrentUrlEquals($uri) {
        return $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeCurrentUrlEquals', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that the current URL matches the given regular expression.
     *
     * ``` php
     * <?php
     * // to match root url
     * $I->seeCurrentUrlMatches('~^/users/(\d+)~');
     * ?>
     * ```
     *
     * @param string $uri
     * @see \Codeception\Module\WebDriver::seeCurrentUrlMatches()
     */
    public function seeCurrentUrlMatches($uri) {
        return $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeCurrentUrlMatches', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Checks that the current URL matches the given regular expression.
     *
     * ``` php
     * <?php
     * // to match root url
     * $I->seeCurrentUrlMatches('~^/users/(\d+)~');
     * ?>
     * ```
     *
     * @param string $uri
     * @see \Codeception\Module\WebDriver::seeCurrentUrlMatches()
     */
    public function tryToSeeCurrentUrlMatches($uri) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('seeCurrentUrlMatches', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes seeCurrentUrlMatches and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\WebDriver::seeCurrentUrlMatches()
     */
    public function retrySeeCurrentUrlMatches($uri) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('seeCurrentUrlMatches', func_get_args(), $retryNum, $retryInterval));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks that the current URL matches the given regular expression.
     *
     * ``` php
     * <?php
     * // to match root url
     * $I->seeCurrentUrlMatches('~^/users/(\d+)~');
     * ?>
     * ```
     *
     * @param string $uri
     * @see \Codeception\Module\WebDriver::seeCurrentUrlMatches()
     */
    public function canSeeCurrentUrlMatches($uri) {
        return $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeCurrentUrlMatches', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that the current URI doesn't contain the given string.
     *
     * ``` php
     * <?php
     * $I->dontSeeInCurrentUrl('/users/');
     * ?>
     * ```
     *
     * @param string $uri
     * @see \Codeception\Module\WebDriver::dontSeeInCurrentUrl()
     */
    public function dontSeeInCurrentUrl($uri) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('dontSeeInCurrentUrl', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Checks that the current URI doesn't contain the given string.
     *
     * ``` php
     * <?php
     * $I->dontSeeInCurrentUrl('/users/');
     * ?>
     * ```
     *
     * @param string $uri
     * @see \Codeception\Module\WebDriver::dontSeeInCurrentUrl()
     */
    public function tryToDontSeeInCurrentUrl($uri) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('dontSeeInCurrentUrl', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes dontSeeInCurrentUrl and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\WebDriver::dontSeeInCurrentUrl()
     */
    public function retryDontSeeInCurrentUrl($uri) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('dontSeeInCurrentUrl', func_get_args(), $retryNum, $retryInterval));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks that the current URI doesn't contain the given string.
     *
     * ``` php
     * <?php
     * $I->dontSeeInCurrentUrl('/users/');
     * ?>
     * ```
     *
     * @param string $uri
     * @see \Codeception\Module\WebDriver::dontSeeInCurrentUrl()
     */
    public function cantSeeInCurrentUrl($uri) {
        return $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('dontSeeInCurrentUrl', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that the current URL doesn't equal the given string.
     * Unlike `dontSeeInCurrentUrl`, this only matches the full URL.
     *
     * ``` php
     * <?php
     * // current url is not root
     * $I->dontSeeCurrentUrlEquals('/');
     * ?>
     * ```
     *
     * @param string $uri
     * @see \Codeception\Module\WebDriver::dontSeeCurrentUrlEquals()
     */
    public function dontSeeCurrentUrlEquals($uri) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('dontSeeCurrentUrlEquals', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Checks that the current URL doesn't equal the given string.
     * Unlike `dontSeeInCurrentUrl`, this only matches the full URL.
     *
     * ``` php
     * <?php
     * // current url is not root
     * $I->dontSeeCurrentUrlEquals('/');
     * ?>
     * ```
     *
     * @param string $uri
     * @see \Codeception\Module\WebDriver::dontSeeCurrentUrlEquals()
     */
    public function tryToDontSeeCurrentUrlEquals($uri) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('dontSeeCurrentUrlEquals', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes dontSeeCurrentUrlEquals and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\WebDriver::dontSeeCurrentUrlEquals()
     */
    public function retryDontSeeCurrentUrlEquals($uri) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('dontSeeCurrentUrlEquals', func_get_args(), $retryNum, $retryInterval));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks that the current URL doesn't equal the given string.
     * Unlike `dontSeeInCurrentUrl`, this only matches the full URL.
     *
     * ``` php
     * <?php
     * // current url is not root
     * $I->dontSeeCurrentUrlEquals('/');
     * ?>
     * ```
     *
     * @param string $uri
     * @see \Codeception\Module\WebDriver::dontSeeCurrentUrlEquals()
     */
    public function cantSeeCurrentUrlEquals($uri) {
        return $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('dontSeeCurrentUrlEquals', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that current url doesn't match the given regular expression.
     *
     * ``` php
     * <?php
     * // to match root url
     * $I->dontSeeCurrentUrlMatches('~^/users/(\d+)~');
     * ?>
     * ```
     *
     * @param string $uri
     * @see \Codeception\Module\WebDriver::dontSeeCurrentUrlMatches()
     */
    public function dontSeeCurrentUrlMatches($uri) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('dontSeeCurrentUrlMatches', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Checks that current url doesn't match the given regular expression.
     *
     * ``` php
     * <?php
     * // to match root url
     * $I->dontSeeCurrentUrlMatches('~^/users/(\d+)~');
     * ?>
     * ```
     *
     * @param string $uri
     * @see \Codeception\Module\WebDriver::dontSeeCurrentUrlMatches()
     */
    public function tryToDontSeeCurrentUrlMatches($uri) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('dontSeeCurrentUrlMatches', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes dontSeeCurrentUrlMatches and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\WebDriver::dontSeeCurrentUrlMatches()
     */
    public function retryDontSeeCurrentUrlMatches($uri) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('dontSeeCurrentUrlMatches', func_get_args(), $retryNum, $retryInterval));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks that current url doesn't match the given regular expression.
     *
     * ``` php
     * <?php
     * // to match root url
     * $I->dontSeeCurrentUrlMatches('~^/users/(\d+)~');
     * ?>
     * ```
     *
     * @param string $uri
     * @see \Codeception\Module\WebDriver::dontSeeCurrentUrlMatches()
     */
    public function cantSeeCurrentUrlMatches($uri) {
        return $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('dontSeeCurrentUrlMatches', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Executes the given regular expression against the current URI and returns the first capturing group.
     * If no parameters are provided, the full URI is returned.
     *
     * ``` php
     * <?php
     * $user_id = $I->grabFromCurrentUrl('~^/user/(\d+)/~');
     * $uri = $I->grabFromCurrentUrl();
     * ?>
     * ```
     *
     * @param string $uri optional
     *
     * @return mixed
     * @see \Codeception\Module\WebDriver::grabFromCurrentUrl()
     */
    public function grabFromCurrentUrl($uri = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('grabFromCurrentUrl', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes grabFromCurrentUrl and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\WebDriver::grabFromCurrentUrl()
     */
    public function retryGrabFromCurrentUrl($uri = null) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('grabFromCurrentUrl', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that the specified checkbox is checked.
     *
     * ``` php
     * <?php
     * $I->seeCheckboxIsChecked('#agree'); // I suppose user agreed to terms
     * $I->seeCheckboxIsChecked('#signup_form input[type=checkbox]'); // I suppose user agreed to terms, If there is only one checkbox in form.
     * $I->seeCheckboxIsChecked('//form/input[@type=checkbox and @name=agree]');
     * ?>
     * ```
     *
     * @param $checkbox
     * @see \Codeception\Module\WebDriver::seeCheckboxIsChecked()
     */
    public function seeCheckboxIsChecked($checkbox) {
        return $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeCheckboxIsChecked', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Checks that the specified checkbox is checked.
     *
     * ``` php
     * <?php
     * $I->seeCheckboxIsChecked('#agree'); // I suppose user agreed to terms
     * $I->seeCheckboxIsChecked('#signup_form input[type=checkbox]'); // I suppose user agreed to terms, If there is only one checkbox in form.
     * $I->seeCheckboxIsChecked('//form/input[@type=checkbox and @name=agree]');
     * ?>
     * ```
     *
     * @param $checkbox
     * @see \Codeception\Module\WebDriver::seeCheckboxIsChecked()
     */
    public function tryToSeeCheckboxIsChecked($checkbox) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('seeCheckboxIsChecked', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes seeCheckboxIsChecked and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\WebDriver::seeCheckboxIsChecked()
     */
    public function retrySeeCheckboxIsChecked($checkbox) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('seeCheckboxIsChecked', func_get_args(), $retryNum, $retryInterval));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks that the specified checkbox is checked.
     *
     * ``` php
     * <?php
     * $I->seeCheckboxIsChecked('#agree'); // I suppose user agreed to terms
     * $I->seeCheckboxIsChecked('#signup_form input[type=checkbox]'); // I suppose user agreed to terms, If there is only one checkbox in form.
     * $I->seeCheckboxIsChecked('//form/input[@type=checkbox and @name=agree]');
     * ?>
     * ```
     *
     * @param $checkbox
     * @see \Codeception\Module\WebDriver::seeCheckboxIsChecked()
     */
    public function canSeeCheckboxIsChecked($checkbox) {
        return $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeCheckboxIsChecked', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Check that the specified checkbox is unchecked.
     *
     * ``` php
     * <?php
     * $I->dontSeeCheckboxIsChecked('#agree'); // I suppose user didn't agree to terms
     * $I->seeCheckboxIsChecked('#signup_form input[type=checkbox]'); // I suppose user didn't check the first checkbox in form.
     * ?>
     * ```
     *
     * @param $checkbox
     * @see \Codeception\Module\WebDriver::dontSeeCheckboxIsChecked()
     */
    public function dontSeeCheckboxIsChecked($checkbox) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('dontSeeCheckboxIsChecked', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Check that the specified checkbox is unchecked.
     *
     * ``` php
     * <?php
     * $I->dontSeeCheckboxIsChecked('#agree'); // I suppose user didn't agree to terms
     * $I->seeCheckboxIsChecked('#signup_form input[type=checkbox]'); // I suppose user didn't check the first checkbox in form.
     * ?>
     * ```
     *
     * @param $checkbox
     * @see \Codeception\Module\WebDriver::dontSeeCheckboxIsChecked()
     */
    public function tryToDontSeeCheckboxIsChecked($checkbox) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('dontSeeCheckboxIsChecked', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes dontSeeCheckboxIsChecked and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\WebDriver::dontSeeCheckboxIsChecked()
     */
    public function retryDontSeeCheckboxIsChecked($checkbox) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('dontSeeCheckboxIsChecked', func_get_args(), $retryNum, $retryInterval));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Check that the specified checkbox is unchecked.
     *
     * ``` php
     * <?php
     * $I->dontSeeCheckboxIsChecked('#agree'); // I suppose user didn't agree to terms
     * $I->seeCheckboxIsChecked('#signup_form input[type=checkbox]'); // I suppose user didn't check the first checkbox in form.
     * ?>
     * ```
     *
     * @param $checkbox
     * @see \Codeception\Module\WebDriver::dontSeeCheckboxIsChecked()
     */
    public function cantSeeCheckboxIsChecked($checkbox) {
        return $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('dontSeeCheckboxIsChecked', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that the given input field or textarea *equals* (i.e. not just contains) the given value.
     * Fields are matched by label text, the "name" attribute, CSS, or XPath.
     *
     * ``` php
     * <?php
     * $I->seeInField('Body','Type your comment here');
     * $I->seeInField('form textarea[name=body]','Type your comment here');
     * $I->seeInField('form input[type=hidden]','hidden_value');
     * $I->seeInField('#searchform input','Search');
     * $I->seeInField('//form/*[@name=search]','Search');
     * $I->seeInField(['name' => 'search'], 'Search');
     * ?>
     * ```
     *
     * @param $field
     * @param $value
     * @see \Codeception\Module\WebDriver::seeInField()
     */
    public function seeInField($field, $value) {
        return $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeInField', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Checks that the given input field or textarea *equals* (i.e. not just contains) the given value.
     * Fields are matched by label text, the "name" attribute, CSS, or XPath.
     *
     * ``` php
     * <?php
     * $I->seeInField('Body','Type your comment here');
     * $I->seeInField('form textarea[name=body]','Type your comment here');
     * $I->seeInField('form input[type=hidden]','hidden_value');
     * $I->seeInField('#searchform input','Search');
     * $I->seeInField('//form/*[@name=search]','Search');
     * $I->seeInField(['name' => 'search'], 'Search');
     * ?>
     * ```
     *
     * @param $field
     * @param $value
     * @see \Codeception\Module\WebDriver::seeInField()
     */
    public function tryToSeeInField($field, $value) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('seeInField', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes seeInField and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\WebDriver::seeInField()
     */
    public function retrySeeInField($field, $value) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('seeInField', func_get_args(), $retryNum, $retryInterval));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks that the given input field or textarea *equals* (i.e. not just contains) the given value.
     * Fields are matched by label text, the "name" attribute, CSS, or XPath.
     *
     * ``` php
     * <?php
     * $I->seeInField('Body','Type your comment here');
     * $I->seeInField('form textarea[name=body]','Type your comment here');
     * $I->seeInField('form input[type=hidden]','hidden_value');
     * $I->seeInField('#searchform input','Search');
     * $I->seeInField('//form/*[@name=search]','Search');
     * $I->seeInField(['name' => 'search'], 'Search');
     * ?>
     * ```
     *
     * @param $field
     * @param $value
     * @see \Codeception\Module\WebDriver::seeInField()
     */
    public function canSeeInField($field, $value) {
        return $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeInField', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that an input field or textarea doesn't contain the given value.
     * For fuzzy locators, the field is matched by label text, CSS and XPath.
     *
     * ``` php
     * <?php
     * $I->dontSeeInField('Body','Type your comment here');
     * $I->dontSeeInField('form textarea[name=body]','Type your comment here');
     * $I->dontSeeInField('form input[type=hidden]','hidden_value');
     * $I->dontSeeInField('#searchform input','Search');
     * $I->dontSeeInField('//form/*[@name=search]','Search');
     * $I->dontSeeInField(['name' => 'search'], 'Search');
     * ?>
     * ```
     *
     * @param $field
     * @param $value
     * @see \Codeception\Module\WebDriver::dontSeeInField()
     */
    public function dontSeeInField($field, $value) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('dontSeeInField', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Checks that an input field or textarea doesn't contain the given value.
     * For fuzzy locators, the field is matched by label text, CSS and XPath.
     *
     * ``` php
     * <?php
     * $I->dontSeeInField('Body','Type your comment here');
     * $I->dontSeeInField('form textarea[name=body]','Type your comment here');
     * $I->dontSeeInField('form input[type=hidden]','hidden_value');
     * $I->dontSeeInField('#searchform input','Search');
     * $I->dontSeeInField('//form/*[@name=search]','Search');
     * $I->dontSeeInField(['name' => 'search'], 'Search');
     * ?>
     * ```
     *
     * @param $field
     * @param $value
     * @see \Codeception\Module\WebDriver::dontSeeInField()
     */
    public function tryToDontSeeInField($field, $value) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('dontSeeInField', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes dontSeeInField and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\WebDriver::dontSeeInField()
     */
    public function retryDontSeeInField($field, $value) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('dontSeeInField', func_get_args(), $retryNum, $retryInterval));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks that an input field or textarea doesn't contain the given value.
     * For fuzzy locators, the field is matched by label text, CSS and XPath.
     *
     * ``` php
     * <?php
     * $I->dontSeeInField('Body','Type your comment here');
     * $I->dontSeeInField('form textarea[name=body]','Type your comment here');
     * $I->dontSeeInField('form input[type=hidden]','hidden_value');
     * $I->dontSeeInField('#searchform input','Search');
     * $I->dontSeeInField('//form/*[@name=search]','Search');
     * $I->dontSeeInField(['name' => 'search'], 'Search');
     * ?>
     * ```
     *
     * @param $field
     * @param $value
     * @see \Codeception\Module\WebDriver::dontSeeInField()
     */
    public function cantSeeInField($field, $value) {
        return $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('dontSeeInField', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks if the array of form parameters (name => value) are set on the form matched with the
     * passed selector.
     *
     * ``` php
     * <?php
     * $I->seeInFormFields('form[name=myform]', [
     *      'input1' => 'value',
     *      'input2' => 'other value',
     * ]);
     * ?>
     * ```
     *
     * For multi-select elements, or to check values of multiple elements with the same name, an
     * array may be passed:
     *
     * ``` php
     * <?php
     * $I->seeInFormFields('.form-class', [
     *      'multiselect' => [
     *          'value1',
     *          'value2',
     *      ],
     *      'checkbox[]' => [
     *          'a checked value',
     *          'another checked value',
     *      ],
     * ]);
     * ?>
     * ```
     *
     * Additionally, checkbox values can be checked with a boolean.
     *
     * ``` php
     * <?php
     * $I->seeInFormFields('#form-id', [
     *      'checkbox1' => true,        // passes if checked
     *      'checkbox2' => false,       // passes if unchecked
     * ]);
     * ?>
     * ```
     *
     * Pair this with submitForm for quick testing magic.
     *
     * ``` php
     * <?php
     * $form = [
     *      'field1' => 'value',
     *      'field2' => 'another value',
     *      'checkbox1' => true,
     *      // ...
     * ];
     * $I->submitForm('//form[@id=my-form]', $form, 'submitButton');
     * // $I->amOnPage('/path/to/form-page') may be needed
     * $I->seeInFormFields('//form[@id=my-form]', $form);
     * ?>
     * ```
     *
     * @param $formSelector
     * @param $params
     * @see \Codeception\Module\WebDriver::seeInFormFields()
     */
    public function seeInFormFields($formSelector, $params) {
        return $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeInFormFields', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Checks if the array of form parameters (name => value) are set on the form matched with the
     * passed selector.
     *
     * ``` php
     * <?php
     * $I->seeInFormFields('form[name=myform]', [
     *      'input1' => 'value',
     *      'input2' => 'other value',
     * ]);
     * ?>
     * ```
     *
     * For multi-select elements, or to check values of multiple elements with the same name, an
     * array may be passed:
     *
     * ``` php
     * <?php
     * $I->seeInFormFields('.form-class', [
     *      'multiselect' => [
     *          'value1',
     *          'value2',
     *      ],
     *      'checkbox[]' => [
     *          'a checked value',
     *          'another checked value',
     *      ],
     * ]);
     * ?>
     * ```
     *
     * Additionally, checkbox values can be checked with a boolean.
     *
     * ``` php
     * <?php
     * $I->seeInFormFields('#form-id', [
     *      'checkbox1' => true,        // passes if checked
     *      'checkbox2' => false,       // passes if unchecked
     * ]);
     * ?>
     * ```
     *
     * Pair this with submitForm for quick testing magic.
     *
     * ``` php
     * <?php
     * $form = [
     *      'field1' => 'value',
     *      'field2' => 'another value',
     *      'checkbox1' => true,
     *      // ...
     * ];
     * $I->submitForm('//form[@id=my-form]', $form, 'submitButton');
     * // $I->amOnPage('/path/to/form-page') may be needed
     * $I->seeInFormFields('//form[@id=my-form]', $form);
     * ?>
     * ```
     *
     * @param $formSelector
     * @param $params
     * @see \Codeception\Module\WebDriver::seeInFormFields()
     */
    public function tryToSeeInFormFields($formSelector, $params) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('seeInFormFields', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes seeInFormFields and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\WebDriver::seeInFormFields()
     */
    public function retrySeeInFormFields($formSelector, $params) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('seeInFormFields', func_get_args(), $retryNum, $retryInterval));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks if the array of form parameters (name => value) are set on the form matched with the
     * passed selector.
     *
     * ``` php
     * <?php
     * $I->seeInFormFields('form[name=myform]', [
     *      'input1' => 'value',
     *      'input2' => 'other value',
     * ]);
     * ?>
     * ```
     *
     * For multi-select elements, or to check values of multiple elements with the same name, an
     * array may be passed:
     *
     * ``` php
     * <?php
     * $I->seeInFormFields('.form-class', [
     *      'multiselect' => [
     *          'value1',
     *          'value2',
     *      ],
     *      'checkbox[]' => [
     *          'a checked value',
     *          'another checked value',
     *      ],
     * ]);
     * ?>
     * ```
     *
     * Additionally, checkbox values can be checked with a boolean.
     *
     * ``` php
     * <?php
     * $I->seeInFormFields('#form-id', [
     *      'checkbox1' => true,        // passes if checked
     *      'checkbox2' => false,       // passes if unchecked
     * ]);
     * ?>
     * ```
     *
     * Pair this with submitForm for quick testing magic.
     *
     * ``` php
     * <?php
     * $form = [
     *      'field1' => 'value',
     *      'field2' => 'another value',
     *      'checkbox1' => true,
     *      // ...
     * ];
     * $I->submitForm('//form[@id=my-form]', $form, 'submitButton');
     * // $I->amOnPage('/path/to/form-page') may be needed
     * $I->seeInFormFields('//form[@id=my-form]', $form);
     * ?>
     * ```
     *
     * @param $formSelector
     * @param $params
     * @see \Codeception\Module\WebDriver::seeInFormFields()
     */
    public function canSeeInFormFields($formSelector, $params) {
        return $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeInFormFields', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks if the array of form parameters (name => value) are not set on the form matched with
     * the passed selector.
     *
     * ``` php
     * <?php
     * $I->dontSeeInFormFields('form[name=myform]', [
     *      'input1' => 'non-existent value',
     *      'input2' => 'other non-existent value',
     * ]);
     * ?>
     * ```
     *
     * To check that an element hasn't been assigned any one of many values, an array can be passed
     * as the value:
     *
     * ``` php
     * <?php
     * $I->dontSeeInFormFields('.form-class', [
     *      'fieldName' => [
     *          'This value shouldn\'t be set',
     *          'And this value shouldn\'t be set',
     *      ],
     * ]);
     * ?>
     * ```
     *
     * Additionally, checkbox values can be checked with a boolean.
     *
     * ``` php
     * <?php
     * $I->dontSeeInFormFields('#form-id', [
     *      'checkbox1' => true,        // fails if checked
     *      'checkbox2' => false,       // fails if unchecked
     * ]);
     * ?>
     * ```
     *
     * @param $formSelector
     * @param $params
     * @see \Codeception\Module\WebDriver::dontSeeInFormFields()
     */
    public function dontSeeInFormFields($formSelector, $params) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('dontSeeInFormFields', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Checks if the array of form parameters (name => value) are not set on the form matched with
     * the passed selector.
     *
     * ``` php
     * <?php
     * $I->dontSeeInFormFields('form[name=myform]', [
     *      'input1' => 'non-existent value',
     *      'input2' => 'other non-existent value',
     * ]);
     * ?>
     * ```
     *
     * To check that an element hasn't been assigned any one of many values, an array can be passed
     * as the value:
     *
     * ``` php
     * <?php
     * $I->dontSeeInFormFields('.form-class', [
     *      'fieldName' => [
     *          'This value shouldn\'t be set',
     *          'And this value shouldn\'t be set',
     *      ],
     * ]);
     * ?>
     * ```
     *
     * Additionally, checkbox values can be checked with a boolean.
     *
     * ``` php
     * <?php
     * $I->dontSeeInFormFields('#form-id', [
     *      'checkbox1' => true,        // fails if checked
     *      'checkbox2' => false,       // fails if unchecked
     * ]);
     * ?>
     * ```
     *
     * @param $formSelector
     * @param $params
     * @see \Codeception\Module\WebDriver::dontSeeInFormFields()
     */
    public function tryToDontSeeInFormFields($formSelector, $params) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('dontSeeInFormFields', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes dontSeeInFormFields and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\WebDriver::dontSeeInFormFields()
     */
    public function retryDontSeeInFormFields($formSelector, $params) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('dontSeeInFormFields', func_get_args(), $retryNum, $retryInterval));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks if the array of form parameters (name => value) are not set on the form matched with
     * the passed selector.
     *
     * ``` php
     * <?php
     * $I->dontSeeInFormFields('form[name=myform]', [
     *      'input1' => 'non-existent value',
     *      'input2' => 'other non-existent value',
     * ]);
     * ?>
     * ```
     *
     * To check that an element hasn't been assigned any one of many values, an array can be passed
     * as the value:
     *
     * ``` php
     * <?php
     * $I->dontSeeInFormFields('.form-class', [
     *      'fieldName' => [
     *          'This value shouldn\'t be set',
     *          'And this value shouldn\'t be set',
     *      ],
     * ]);
     * ?>
     * ```
     *
     * Additionally, checkbox values can be checked with a boolean.
     *
     * ``` php
     * <?php
     * $I->dontSeeInFormFields('#form-id', [
     *      'checkbox1' => true,        // fails if checked
     *      'checkbox2' => false,       // fails if unchecked
     * ]);
     * ?>
     * ```
     *
     * @param $formSelector
     * @param $params
     * @see \Codeception\Module\WebDriver::dontSeeInFormFields()
     */
    public function cantSeeInFormFields($formSelector, $params) {
        return $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('dontSeeInFormFields', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Selects an option in a select tag or in radio button group.
     *
     * ``` php
     * <?php
     * $I->selectOption('form select[name=account]', 'Premium');
     * $I->selectOption('form input[name=payment]', 'Monthly');
     * $I->selectOption('//form/select[@name=account]', 'Monthly');
     * ?>
     * ```
     *
     * Provide an array for the second argument to select multiple options:
     *
     * ``` php
     * <?php
     * $I->selectOption('Which OS do you use?', array('Windows','Linux'));
     * ?>
     * ```
     *
     * Or provide an associative array for the second argument to specifically define which selection method should be used:
     *
     * ``` php
     * <?php
     * $I->selectOption('Which OS do you use?', array('text' => 'Windows')); // Only search by text 'Windows'
     * $I->selectOption('Which OS do you use?', array('value' => 'windows')); // Only search by value 'windows'
     * ?>
     * ```
     *
     * @param $select
     * @param $option
     * @see \Codeception\Module\WebDriver::selectOption()
     */
    public function selectOption($select, $option) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('selectOption', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Selects an option in a select tag or in radio button group.
     *
     * ``` php
     * <?php
     * $I->selectOption('form select[name=account]', 'Premium');
     * $I->selectOption('form input[name=payment]', 'Monthly');
     * $I->selectOption('//form/select[@name=account]', 'Monthly');
     * ?>
     * ```
     *
     * Provide an array for the second argument to select multiple options:
     *
     * ``` php
     * <?php
     * $I->selectOption('Which OS do you use?', array('Windows','Linux'));
     * ?>
     * ```
     *
     * Or provide an associative array for the second argument to specifically define which selection method should be used:
     *
     * ``` php
     * <?php
     * $I->selectOption('Which OS do you use?', array('text' => 'Windows')); // Only search by text 'Windows'
     * $I->selectOption('Which OS do you use?', array('value' => 'windows')); // Only search by value 'windows'
     * ?>
     * ```
     *
     * @param $select
     * @param $option
     * @see \Codeception\Module\WebDriver::selectOption()
     */
    public function tryToSelectOption($select, $option) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('selectOption', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes selectOption and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\WebDriver::selectOption()
     */
    public function retrySelectOption($select, $option) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('selectOption', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Unselect an option in the given select box.
     *
     * @param $select
     * @param $option
     * @see \Codeception\Module\WebDriver::unselectOption()
     */
    public function unselectOption($select, $option) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('unselectOption', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Unselect an option in the given select box.
     *
     * @param $select
     * @param $option
     * @see \Codeception\Module\WebDriver::unselectOption()
     */
    public function tryToUnselectOption($select, $option) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('unselectOption', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes unselectOption and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\WebDriver::unselectOption()
     */
    public function retryUnselectOption($select, $option) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('unselectOption', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Ticks a checkbox. For radio buttons, use the `selectOption` method instead.
     *
     * ``` php
     * <?php
     * $I->checkOption('#agree');
     * ?>
     * ```
     *
     * @param $option
     * @see \Codeception\Module\WebDriver::checkOption()
     */
    public function checkOption($option) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('checkOption', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Ticks a checkbox. For radio buttons, use the `selectOption` method instead.
     *
     * ``` php
     * <?php
     * $I->checkOption('#agree');
     * ?>
     * ```
     *
     * @param $option
     * @see \Codeception\Module\WebDriver::checkOption()
     */
    public function tryToCheckOption($option) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('checkOption', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes checkOption and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\WebDriver::checkOption()
     */
    public function retryCheckOption($option) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('checkOption', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Unticks a checkbox.
     *
     * ``` php
     * <?php
     * $I->uncheckOption('#notify');
     * ?>
     * ```
     *
     * @param $option
     * @see \Codeception\Module\WebDriver::uncheckOption()
     */
    public function uncheckOption($option) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('uncheckOption', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Unticks a checkbox.
     *
     * ``` php
     * <?php
     * $I->uncheckOption('#notify');
     * ?>
     * ```
     *
     * @param $option
     * @see \Codeception\Module\WebDriver::uncheckOption()
     */
    public function tryToUncheckOption($option) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('uncheckOption', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes uncheckOption and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\WebDriver::uncheckOption()
     */
    public function retryUncheckOption($option) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('uncheckOption', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Fills a text field or textarea with the given string.
     *
     * ``` php
     * <?php
     * $I->fillField("//input[@type='text']", "Hello World!");
     * $I->fillField(['name' => 'email'], 'jon@mail.com');
     * ?>
     * ```
     *
     * @param $field
     * @param $value
     * @see \Codeception\Module\WebDriver::fillField()
     */
    public function fillField($field, $value) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('fillField', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Fills a text field or textarea with the given string.
     *
     * ``` php
     * <?php
     * $I->fillField("//input[@type='text']", "Hello World!");
     * $I->fillField(['name' => 'email'], 'jon@mail.com');
     * ?>
     * ```
     *
     * @param $field
     * @param $value
     * @see \Codeception\Module\WebDriver::fillField()
     */
    public function tryToFillField($field, $value) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('fillField', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes fillField and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\WebDriver::fillField()
     */
    public function retryFillField($field, $value) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('fillField', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Clears given field which isn't empty.
     *
     * ``` php
     * <?php
     * $I->clearField('#username');
     * ```
     *
     * @param $field
     * @see \Codeception\Module\WebDriver::clearField()
     */
    public function clearField($field) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('clearField', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Clears given field which isn't empty.
     *
     * ``` php
     * <?php
     * $I->clearField('#username');
     * ```
     *
     * @param $field
     * @see \Codeception\Module\WebDriver::clearField()
     */
    public function tryToClearField($field) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('clearField', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes clearField and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\WebDriver::clearField()
     */
    public function retryClearField($field) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('clearField', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     *
     * @see \Guidance\Tests\Base\Actor\Helper\Common::attachFile()
     */
    public function attachFile($field, $file) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('attachFile', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     *
     * @see \Guidance\Tests\Base\Actor\Helper\Common::attachFile()
     */
    public function tryToAttachFile($field, $file) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('attachFile', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes attachFile and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Guidance\Tests\Base\Actor\Helper\Common::attachFile()
     */
    public function retryAttachFile($field, $file) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('attachFile', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Finds and returns the text contents of the given element.
     * If a fuzzy locator is used, the element is found using CSS, XPath,
     * and by matching the full page source by regular expression.
     *
     * ``` php
     * <?php
     * $heading = $I->grabTextFrom('h1');
     * $heading = $I->grabTextFrom('descendant-or-self::h1');
     * $value = $I->grabTextFrom('~<input value=(.*?)]~sgi'); // match with a regex
     * ?>
     * ```
     *
     * @param $cssOrXPathOrRegex
     *
     * @return mixed
     * @see \Codeception\Module\WebDriver::grabTextFrom()
     */
    public function grabTextFrom($cssOrXPathOrRegex) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('grabTextFrom', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes grabTextFrom and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\WebDriver::grabTextFrom()
     */
    public function retryGrabTextFrom($cssOrXPathOrRegex) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('grabTextFrom', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Grabs the value of the given attribute value from the given element.
     * Fails if element is not found.
     *
     * ``` php
     * <?php
     * $I->grabAttributeFrom('#tooltip', 'title');
     * ?>
     * ```
     *
     *
     * @param $cssOrXpath
     * @param $attribute
     *
     * @return mixed
     * @see \Codeception\Module\WebDriver::grabAttributeFrom()
     */
    public function grabAttributeFrom($cssOrXpath, $attribute) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('grabAttributeFrom', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes grabAttributeFrom and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\WebDriver::grabAttributeFrom()
     */
    public function retryGrabAttributeFrom($cssOrXpath, $attribute) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('grabAttributeFrom', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Finds the value for the given form field.
     * If a fuzzy locator is used, the field is found by field name, CSS, and XPath.
     *
     * ``` php
     * <?php
     * $name = $I->grabValueFrom('Name');
     * $name = $I->grabValueFrom('input[name=username]');
     * $name = $I->grabValueFrom('descendant-or-self::form/descendant::input[@name = 'username']');
     * $name = $I->grabValueFrom(['name' => 'username']);
     * ?>
     * ```
     *
     * @param $field
     *
     * @return mixed
     * @see \Codeception\Module\WebDriver::grabValueFrom()
     */
    public function grabValueFrom($field) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('grabValueFrom', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes grabValueFrom and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\WebDriver::grabValueFrom()
     */
    public function retryGrabValueFrom($field) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('grabValueFrom', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Grabs either the text content, or attribute values, of nodes
     * matched by $cssOrXpath and returns them as an array.
     *
     * ```html
     * <a href="#first">First</a>
     * <a href="#second">Second</a>
     * <a href="#third">Third</a>
     * ```
     *
     * ```php
     * <?php
     * // would return ['First', 'Second', 'Third']
     * $aLinkText = $I->grabMultiple('a');
     *
     * // would return ['#first', '#second', '#third']
     * $aLinks = $I->grabMultiple('a', 'href');
     * ?>
     * ```
     *
     * @param $cssOrXpath
     * @param $attribute
     * @return string[]
     * @see \Codeception\Module\WebDriver::grabMultiple()
     */
    public function grabMultiple($cssOrXpath, $attribute = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('grabMultiple', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes grabMultiple and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\WebDriver::grabMultiple()
     */
    public function retryGrabMultiple($cssOrXpath, $attribute = null) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('grabMultiple', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that the given element exists on the page and is visible.
     * You can also specify expected attributes of this element.
     *
     * ``` php
     * <?php
     * $I->seeElement('.error');
     * $I->seeElement('//form/input[1]');
     * $I->seeElement('input', ['name' => 'login']);
     * $I->seeElement('input', ['value' => '123456']);
     *
     * // strict locator in first arg, attributes in second
     * $I->seeElement(['css' => 'form input'], ['name' => 'login']);
     * ?>
     * ```
     *
     * @param $selector
     * @param array $attributes
     * @return
     * @see \Codeception\Module\WebDriver::seeElement()
     */
    public function seeElement($selector, $attributes = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeElement', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Checks that the given element exists on the page and is visible.
     * You can also specify expected attributes of this element.
     *
     * ``` php
     * <?php
     * $I->seeElement('.error');
     * $I->seeElement('//form/input[1]');
     * $I->seeElement('input', ['name' => 'login']);
     * $I->seeElement('input', ['value' => '123456']);
     *
     * // strict locator in first arg, attributes in second
     * $I->seeElement(['css' => 'form input'], ['name' => 'login']);
     * ?>
     * ```
     *
     * @param $selector
     * @param array $attributes
     * @return
     * @see \Codeception\Module\WebDriver::seeElement()
     */
    public function tryToSeeElement($selector, $attributes = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('seeElement', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes seeElement and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\WebDriver::seeElement()
     */
    public function retrySeeElement($selector, $attributes = null) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('seeElement', func_get_args(), $retryNum, $retryInterval));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks that the given element exists on the page and is visible.
     * You can also specify expected attributes of this element.
     *
     * ``` php
     * <?php
     * $I->seeElement('.error');
     * $I->seeElement('//form/input[1]');
     * $I->seeElement('input', ['name' => 'login']);
     * $I->seeElement('input', ['value' => '123456']);
     *
     * // strict locator in first arg, attributes in second
     * $I->seeElement(['css' => 'form input'], ['name' => 'login']);
     * ?>
     * ```
     *
     * @param $selector
     * @param array $attributes
     * @return
     * @see \Codeception\Module\WebDriver::seeElement()
     */
    public function canSeeElement($selector, $attributes = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeElement', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that the given element is invisible or not present on the page.
     * You can also specify expected attributes of this element.
     *
     * ``` php
     * <?php
     * $I->dontSeeElement('.error');
     * $I->dontSeeElement('//form/input[1]');
     * $I->dontSeeElement('input', ['name' => 'login']);
     * $I->dontSeeElement('input', ['value' => '123456']);
     * ?>
     * ```
     *
     * @param $selector
     * @param array $attributes
     * @see \Codeception\Module\WebDriver::dontSeeElement()
     */
    public function dontSeeElement($selector, $attributes = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('dontSeeElement', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Checks that the given element is invisible or not present on the page.
     * You can also specify expected attributes of this element.
     *
     * ``` php
     * <?php
     * $I->dontSeeElement('.error');
     * $I->dontSeeElement('//form/input[1]');
     * $I->dontSeeElement('input', ['name' => 'login']);
     * $I->dontSeeElement('input', ['value' => '123456']);
     * ?>
     * ```
     *
     * @param $selector
     * @param array $attributes
     * @see \Codeception\Module\WebDriver::dontSeeElement()
     */
    public function tryToDontSeeElement($selector, $attributes = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('dontSeeElement', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes dontSeeElement and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\WebDriver::dontSeeElement()
     */
    public function retryDontSeeElement($selector, $attributes = null) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('dontSeeElement', func_get_args(), $retryNum, $retryInterval));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks that the given element is invisible or not present on the page.
     * You can also specify expected attributes of this element.
     *
     * ``` php
     * <?php
     * $I->dontSeeElement('.error');
     * $I->dontSeeElement('//form/input[1]');
     * $I->dontSeeElement('input', ['name' => 'login']);
     * $I->dontSeeElement('input', ['value' => '123456']);
     * ?>
     * ```
     *
     * @param $selector
     * @param array $attributes
     * @see \Codeception\Module\WebDriver::dontSeeElement()
     */
    public function cantSeeElement($selector, $attributes = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('dontSeeElement', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that the given element exists on the page, even it is invisible.
     *
     * ``` php
     * <?php
     * $I->seeElementInDOM('//form/input[type=hidden]');
     * ?>
     * ```
     *
     * @param $selector
     * @param array $attributes
     * @see \Codeception\Module\WebDriver::seeElementInDOM()
     */
    public function seeElementInDOM($selector, $attributes = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeElementInDOM', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Checks that the given element exists on the page, even it is invisible.
     *
     * ``` php
     * <?php
     * $I->seeElementInDOM('//form/input[type=hidden]');
     * ?>
     * ```
     *
     * @param $selector
     * @param array $attributes
     * @see \Codeception\Module\WebDriver::seeElementInDOM()
     */
    public function tryToSeeElementInDOM($selector, $attributes = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('seeElementInDOM', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes seeElementInDOM and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\WebDriver::seeElementInDOM()
     */
    public function retrySeeElementInDOM($selector, $attributes = null) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('seeElementInDOM', func_get_args(), $retryNum, $retryInterval));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks that the given element exists on the page, even it is invisible.
     *
     * ``` php
     * <?php
     * $I->seeElementInDOM('//form/input[type=hidden]');
     * ?>
     * ```
     *
     * @param $selector
     * @param array $attributes
     * @see \Codeception\Module\WebDriver::seeElementInDOM()
     */
    public function canSeeElementInDOM($selector, $attributes = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeElementInDOM', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Opposite of `seeElementInDOM`.
     *
     * @param $selector
     * @param array $attributes
     * @see \Codeception\Module\WebDriver::dontSeeElementInDOM()
     */
    public function dontSeeElementInDOM($selector, $attributes = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('dontSeeElementInDOM', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Opposite of `seeElementInDOM`.
     *
     * @param $selector
     * @param array $attributes
     * @see \Codeception\Module\WebDriver::dontSeeElementInDOM()
     */
    public function tryToDontSeeElementInDOM($selector, $attributes = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('dontSeeElementInDOM', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes dontSeeElementInDOM and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\WebDriver::dontSeeElementInDOM()
     */
    public function retryDontSeeElementInDOM($selector, $attributes = null) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('dontSeeElementInDOM', func_get_args(), $retryNum, $retryInterval));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Opposite of `seeElementInDOM`.
     *
     * @param $selector
     * @param array $attributes
     * @see \Codeception\Module\WebDriver::dontSeeElementInDOM()
     */
    public function cantSeeElementInDOM($selector, $attributes = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('dontSeeElementInDOM', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that there are a certain number of elements matched by the given locator on the page.
     *
     * ``` php
     * <?php
     * $I->seeNumberOfElements('tr', 10);
     * $I->seeNumberOfElements('tr', [0,10]); // between 0 and 10 elements
     * ?>
     * ```
     * @param $selector
     * @param mixed $expected int or int[]
     * @see \Codeception\Module\WebDriver::seeNumberOfElements()
     */
    public function seeNumberOfElements($selector, $expected) {
        return $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeNumberOfElements', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Checks that there are a certain number of elements matched by the given locator on the page.
     *
     * ``` php
     * <?php
     * $I->seeNumberOfElements('tr', 10);
     * $I->seeNumberOfElements('tr', [0,10]); // between 0 and 10 elements
     * ?>
     * ```
     * @param $selector
     * @param mixed $expected int or int[]
     * @see \Codeception\Module\WebDriver::seeNumberOfElements()
     */
    public function tryToSeeNumberOfElements($selector, $expected) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('seeNumberOfElements', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes seeNumberOfElements and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\WebDriver::seeNumberOfElements()
     */
    public function retrySeeNumberOfElements($selector, $expected) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('seeNumberOfElements', func_get_args(), $retryNum, $retryInterval));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks that there are a certain number of elements matched by the given locator on the page.
     *
     * ``` php
     * <?php
     * $I->seeNumberOfElements('tr', 10);
     * $I->seeNumberOfElements('tr', [0,10]); // between 0 and 10 elements
     * ?>
     * ```
     * @param $selector
     * @param mixed $expected int or int[]
     * @see \Codeception\Module\WebDriver::seeNumberOfElements()
     */
    public function canSeeNumberOfElements($selector, $expected) {
        return $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeNumberOfElements', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     *
     * @see \Codeception\Module\WebDriver::seeNumberOfElementsInDOM()
     */
    public function seeNumberOfElementsInDOM($selector, $expected) {
        return $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeNumberOfElementsInDOM', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     *
     * @see \Codeception\Module\WebDriver::seeNumberOfElementsInDOM()
     */
    public function tryToSeeNumberOfElementsInDOM($selector, $expected) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('seeNumberOfElementsInDOM', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes seeNumberOfElementsInDOM and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\WebDriver::seeNumberOfElementsInDOM()
     */
    public function retrySeeNumberOfElementsInDOM($selector, $expected) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('seeNumberOfElementsInDOM', func_get_args(), $retryNum, $retryInterval));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     *
     * @see \Codeception\Module\WebDriver::seeNumberOfElementsInDOM()
     */
    public function canSeeNumberOfElementsInDOM($selector, $expected) {
        return $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeNumberOfElementsInDOM', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that the given option is selected.
     *
     * ``` php
     * <?php
     * $I->seeOptionIsSelected('#form input[name=payment]', 'Visa');
     * ?>
     * ```
     *
     * @param $selector
     * @param $optionText
     *
     * @return mixed
     * @see \Codeception\Module\WebDriver::seeOptionIsSelected()
     */
    public function seeOptionIsSelected($selector, $optionText) {
        return $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeOptionIsSelected', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Checks that the given option is selected.
     *
     * ``` php
     * <?php
     * $I->seeOptionIsSelected('#form input[name=payment]', 'Visa');
     * ?>
     * ```
     *
     * @param $selector
     * @param $optionText
     *
     * @return mixed
     * @see \Codeception\Module\WebDriver::seeOptionIsSelected()
     */
    public function tryToSeeOptionIsSelected($selector, $optionText) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('seeOptionIsSelected', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes seeOptionIsSelected and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\WebDriver::seeOptionIsSelected()
     */
    public function retrySeeOptionIsSelected($selector, $optionText) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('seeOptionIsSelected', func_get_args(), $retryNum, $retryInterval));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks that the given option is selected.
     *
     * ``` php
     * <?php
     * $I->seeOptionIsSelected('#form input[name=payment]', 'Visa');
     * ?>
     * ```
     *
     * @param $selector
     * @param $optionText
     *
     * @return mixed
     * @see \Codeception\Module\WebDriver::seeOptionIsSelected()
     */
    public function canSeeOptionIsSelected($selector, $optionText) {
        return $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeOptionIsSelected', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that the given option is not selected.
     *
     * ``` php
     * <?php
     * $I->dontSeeOptionIsSelected('#form input[name=payment]', 'Visa');
     * ?>
     * ```
     *
     * @param $selector
     * @param $optionText
     *
     * @return mixed
     * @see \Codeception\Module\WebDriver::dontSeeOptionIsSelected()
     */
    public function dontSeeOptionIsSelected($selector, $optionText) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('dontSeeOptionIsSelected', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Checks that the given option is not selected.
     *
     * ``` php
     * <?php
     * $I->dontSeeOptionIsSelected('#form input[name=payment]', 'Visa');
     * ?>
     * ```
     *
     * @param $selector
     * @param $optionText
     *
     * @return mixed
     * @see \Codeception\Module\WebDriver::dontSeeOptionIsSelected()
     */
    public function tryToDontSeeOptionIsSelected($selector, $optionText) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('dontSeeOptionIsSelected', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes dontSeeOptionIsSelected and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\WebDriver::dontSeeOptionIsSelected()
     */
    public function retryDontSeeOptionIsSelected($selector, $optionText) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('dontSeeOptionIsSelected', func_get_args(), $retryNum, $retryInterval));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks that the given option is not selected.
     *
     * ``` php
     * <?php
     * $I->dontSeeOptionIsSelected('#form input[name=payment]', 'Visa');
     * ?>
     * ```
     *
     * @param $selector
     * @param $optionText
     *
     * @return mixed
     * @see \Codeception\Module\WebDriver::dontSeeOptionIsSelected()
     */
    public function cantSeeOptionIsSelected($selector, $optionText) {
        return $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('dontSeeOptionIsSelected', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that the page title contains the given string.
     *
     * ``` php
     * <?php
     * $I->seeInTitle('Blog - Post #1');
     * ?>
     * ```
     *
     * @param $title
     *
     * @return mixed
     * @see \Codeception\Module\WebDriver::seeInTitle()
     */
    public function seeInTitle($title) {
        return $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeInTitle', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Checks that the page title contains the given string.
     *
     * ``` php
     * <?php
     * $I->seeInTitle('Blog - Post #1');
     * ?>
     * ```
     *
     * @param $title
     *
     * @return mixed
     * @see \Codeception\Module\WebDriver::seeInTitle()
     */
    public function tryToSeeInTitle($title) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('seeInTitle', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes seeInTitle and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\WebDriver::seeInTitle()
     */
    public function retrySeeInTitle($title) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('seeInTitle', func_get_args(), $retryNum, $retryInterval));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks that the page title contains the given string.
     *
     * ``` php
     * <?php
     * $I->seeInTitle('Blog - Post #1');
     * ?>
     * ```
     *
     * @param $title
     *
     * @return mixed
     * @see \Codeception\Module\WebDriver::seeInTitle()
     */
    public function canSeeInTitle($title) {
        return $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeInTitle', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that the page title does not contain the given string.
     *
     * @param $title
     *
     * @return mixed
     * @see \Codeception\Module\WebDriver::dontSeeInTitle()
     */
    public function dontSeeInTitle($title) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('dontSeeInTitle', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Checks that the page title does not contain the given string.
     *
     * @param $title
     *
     * @return mixed
     * @see \Codeception\Module\WebDriver::dontSeeInTitle()
     */
    public function tryToDontSeeInTitle($title) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('dontSeeInTitle', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes dontSeeInTitle and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\WebDriver::dontSeeInTitle()
     */
    public function retryDontSeeInTitle($title) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('dontSeeInTitle', func_get_args(), $retryNum, $retryInterval));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks that the page title does not contain the given string.
     *
     * @param $title
     *
     * @return mixed
     * @see \Codeception\Module\WebDriver::dontSeeInTitle()
     */
    public function cantSeeInTitle($title) {
        return $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('dontSeeInTitle', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Accepts the active JavaScript native popup window, as created by `window.alert`|`window.confirm`|`window.prompt`.
     * Don't confuse popups with modal windows,
     * as created by [various libraries](http://jster.net/category/windows-modals-popups).
     * @see \Codeception\Module\WebDriver::acceptPopup()
     */
    public function acceptPopup() {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('acceptPopup', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Accepts the active JavaScript native popup window, as created by `window.alert`|`window.confirm`|`window.prompt`.
     * Don't confuse popups with modal windows,
     * as created by [various libraries](http://jster.net/category/windows-modals-popups).
     * @see \Codeception\Module\WebDriver::acceptPopup()
     */
    public function tryToAcceptPopup() {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('acceptPopup', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes acceptPopup and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\WebDriver::acceptPopup()
     */
    public function retryAcceptPopup() {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('acceptPopup', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Dismisses the active JavaScript popup, as created by `window.alert`, `window.confirm`, or `window.prompt`.
     * @see \Codeception\Module\WebDriver::cancelPopup()
     */
    public function cancelPopup() {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('cancelPopup', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Dismisses the active JavaScript popup, as created by `window.alert`, `window.confirm`, or `window.prompt`.
     * @see \Codeception\Module\WebDriver::cancelPopup()
     */
    public function tryToCancelPopup() {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('cancelPopup', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes cancelPopup and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\WebDriver::cancelPopup()
     */
    public function retryCancelPopup() {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('cancelPopup', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that the active JavaScript popup,
     * as created by `window.alert`|`window.confirm`|`window.prompt`, contains the given string.
     *
     * @param $text
     *
     * @throws \Codeception\Exception\ModuleException
     * @see \Codeception\Module\WebDriver::seeInPopup()
     */
    public function seeInPopup($text) {
        return $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeInPopup', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Checks that the active JavaScript popup,
     * as created by `window.alert`|`window.confirm`|`window.prompt`, contains the given string.
     *
     * @param $text
     *
     * @throws \Codeception\Exception\ModuleException
     * @see \Codeception\Module\WebDriver::seeInPopup()
     */
    public function tryToSeeInPopup($text) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('seeInPopup', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes seeInPopup and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\WebDriver::seeInPopup()
     */
    public function retrySeeInPopup($text) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('seeInPopup', func_get_args(), $retryNum, $retryInterval));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks that the active JavaScript popup,
     * as created by `window.alert`|`window.confirm`|`window.prompt`, contains the given string.
     *
     * @param $text
     *
     * @throws \Codeception\Exception\ModuleException
     * @see \Codeception\Module\WebDriver::seeInPopup()
     */
    public function canSeeInPopup($text) {
        return $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeInPopup', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that the active JavaScript popup,
     * as created by `window.alert`|`window.confirm`|`window.prompt`, does NOT contain the given string.
     *
     * @param $text
     *
     * @throws \Codeception\Exception\ModuleException
     * @see \Codeception\Module\WebDriver::dontSeeInPopup()
     */
    public function dontSeeInPopup($text) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('dontSeeInPopup', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Checks that the active JavaScript popup,
     * as created by `window.alert`|`window.confirm`|`window.prompt`, does NOT contain the given string.
     *
     * @param $text
     *
     * @throws \Codeception\Exception\ModuleException
     * @see \Codeception\Module\WebDriver::dontSeeInPopup()
     */
    public function tryToDontSeeInPopup($text) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('dontSeeInPopup', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes dontSeeInPopup and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\WebDriver::dontSeeInPopup()
     */
    public function retryDontSeeInPopup($text) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('dontSeeInPopup', func_get_args(), $retryNum, $retryInterval));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks that the active JavaScript popup,
     * as created by `window.alert`|`window.confirm`|`window.prompt`, does NOT contain the given string.
     *
     * @param $text
     *
     * @throws \Codeception\Exception\ModuleException
     * @see \Codeception\Module\WebDriver::dontSeeInPopup()
     */
    public function cantSeeInPopup($text) {
        return $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('dontSeeInPopup', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Enters text into a native JavaScript prompt popup, as created by `window.prompt`.
     *
     * @param $keys
     *
     * @throws \Codeception\Exception\ModuleException
     * @see \Codeception\Module\WebDriver::typeInPopup()
     */
    public function typeInPopup($keys) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('typeInPopup', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Enters text into a native JavaScript prompt popup, as created by `window.prompt`.
     *
     * @param $keys
     *
     * @throws \Codeception\Exception\ModuleException
     * @see \Codeception\Module\WebDriver::typeInPopup()
     */
    public function tryToTypeInPopup($keys) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('typeInPopup', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes typeInPopup and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\WebDriver::typeInPopup()
     */
    public function retryTypeInPopup($keys) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('typeInPopup', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Reloads the current page.
     * @see \Codeception\Module\WebDriver::reloadPage()
     */
    public function reloadPage() {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('reloadPage', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Reloads the current page.
     * @see \Codeception\Module\WebDriver::reloadPage()
     */
    public function tryToReloadPage() {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('reloadPage', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes reloadPage and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\WebDriver::reloadPage()
     */
    public function retryReloadPage() {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('reloadPage', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Moves back in history.
     * @see \Codeception\Module\WebDriver::moveBack()
     */
    public function moveBack() {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('moveBack', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Moves back in history.
     * @see \Codeception\Module\WebDriver::moveBack()
     */
    public function tryToMoveBack() {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('moveBack', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes moveBack and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\WebDriver::moveBack()
     */
    public function retryMoveBack() {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('moveBack', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Moves forward in history.
     * @see \Codeception\Module\WebDriver::moveForward()
     */
    public function moveForward() {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('moveForward', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Moves forward in history.
     * @see \Codeception\Module\WebDriver::moveForward()
     */
    public function tryToMoveForward() {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('moveForward', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes moveForward and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\WebDriver::moveForward()
     */
    public function retryMoveForward() {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('moveForward', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Submits the given form on the page, optionally with the given form
     * values.  Give the form fields values as an array. Note that hidden fields
     * can't be accessed.
     *
     * Skipped fields will be filled by their values from the page.
     * You don't need to click the 'Submit' button afterwards.
     * This command itself triggers the request to form's action.
     *
     * You can optionally specify what button's value to include
     * in the request with the last parameter as an alternative to
     * explicitly setting its value in the second parameter, as
     * button values are not otherwise included in the request.
     *
     * Examples:
     *
     * ``` php
     * <?php
     * $I->submitForm('#login', [
     *     'login' => 'davert',
     *     'password' => '123456'
     * ]);
     * // or
     * $I->submitForm('#login', [
     *     'login' => 'davert',
     *     'password' => '123456'
     * ], 'submitButtonName');
     *
     * ```
     *
     * For example, given this sample "Sign Up" form:
     *
     * ``` html
     * <form action="/sign_up">
     *     Login:
     *     <input type="text" name="user[login]" /><br/>
     *     Password:
     *     <input type="password" name="user[password]" /><br/>
     *     Do you agree to our terms?
     *     <input type="checkbox" name="user[agree]" /><br/>
     *     Select pricing plan:
     *     <select name="plan">
     *         <option value="1">Free</option>
     *         <option value="2" selected="selected">Paid</option>
     *     </select>
     *     <input type="submit" name="submitButton" value="Submit" />
     * </form>
     * ```
     *
     * You could write the following to submit it:
     *
     * ``` php
     * <?php
     * $I->submitForm(
     *     '#userForm',
     *     [
     *         'user[login]' => 'Davert',
     *         'user[password]' => '123456',
     *         'user[agree]' => true
     *     ],
     *     'submitButton'
     * );
     * ```
     * Note that "2" will be the submitted value for the "plan" field, as it is
     * the selected option.
     *
     * Also note that this differs from PhpBrowser, in that
     * ```'user' => [ 'login' => 'Davert' ]``` is not supported at the moment.
     * Named array keys *must* be included in the name as above.
     *
     * Pair this with seeInFormFields for quick testing magic.
     *
     * ``` php
     * <?php
     * $form = [
     *      'field1' => 'value',
     *      'field2' => 'another value',
     *      'checkbox1' => true,
     *      // ...
     * ];
     * $I->submitForm('//form[@id=my-form]', $form, 'submitButton');
     * // $I->amOnPage('/path/to/form-page') may be needed
     * $I->seeInFormFields('//form[@id=my-form]', $form);
     * ?>
     * ```
     *
     * Parameter values must be set to arrays for multiple input fields
     * of the same name, or multi-select combo boxes.  For checkboxes,
     * either the string value can be used, or boolean values which will
     * be replaced by the checkbox's value in the DOM.
     *
     * ``` php
     * <?php
     * $I->submitForm('#my-form', [
     *      'field1' => 'value',
     *      'checkbox' => [
     *          'value of first checkbox',
     *          'value of second checkbox',
     *      ],
     *      'otherCheckboxes' => [
     *          true,
     *          false,
     *          false,
     *      ],
     *      'multiselect' => [
     *          'first option value',
     *          'second option value',
     *      ]
     * ]);
     * ?>
     * ```
     *
     * Mixing string and boolean values for a checkbox's value is not supported
     * and may produce unexpected results.
     *
     * Field names ending in "[]" must be passed without the trailing square
     * bracket characters, and must contain an array for its value.  This allows
     * submitting multiple values with the same name, consider:
     *
     * ```php
     * $I->submitForm('#my-form', [
     *     'field[]' => 'value',
     *     'field[]' => 'another value', // 'field[]' is already a defined key
     * ]);
     * ```
     *
     * The solution is to pass an array value:
     *
     * ```php
     * // this way both values are submitted
     * $I->submitForm('#my-form', [
     *     'field' => [
     *         'value',
     *         'another value',
     *     ]
     * ]);
     * ```
     *
     * The `$button` parameter can be either a string, an array or an instance
     * of Facebook\WebDriver\WebDriverBy. When it is a string, the
     * button will be found by its "name" attribute. If $button is an
     * array then it will be treated as a strict selector and a WebDriverBy
     * will be used verbatim.
     *
     * For example, given the following HTML:
     *
     * ``` html
     * <input type="submit" name="submitButton" value="Submit" />
     * ```
     *
     * `$button` could be any one of the following:
     *   - 'submitButton'
     *   - ['name' => 'submitButton']
     *   - WebDriverBy::name('submitButton')
     *
     * @param $selector
     * @param $params
     * @param $button
     * @see \Codeception\Module\WebDriver::submitForm()
     */
    public function submitForm($selector, $params, $button = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('submitForm', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Submits the given form on the page, optionally with the given form
     * values.  Give the form fields values as an array. Note that hidden fields
     * can't be accessed.
     *
     * Skipped fields will be filled by their values from the page.
     * You don't need to click the 'Submit' button afterwards.
     * This command itself triggers the request to form's action.
     *
     * You can optionally specify what button's value to include
     * in the request with the last parameter as an alternative to
     * explicitly setting its value in the second parameter, as
     * button values are not otherwise included in the request.
     *
     * Examples:
     *
     * ``` php
     * <?php
     * $I->submitForm('#login', [
     *     'login' => 'davert',
     *     'password' => '123456'
     * ]);
     * // or
     * $I->submitForm('#login', [
     *     'login' => 'davert',
     *     'password' => '123456'
     * ], 'submitButtonName');
     *
     * ```
     *
     * For example, given this sample "Sign Up" form:
     *
     * ``` html
     * <form action="/sign_up">
     *     Login:
     *     <input type="text" name="user[login]" /><br/>
     *     Password:
     *     <input type="password" name="user[password]" /><br/>
     *     Do you agree to our terms?
     *     <input type="checkbox" name="user[agree]" /><br/>
     *     Select pricing plan:
     *     <select name="plan">
     *         <option value="1">Free</option>
     *         <option value="2" selected="selected">Paid</option>
     *     </select>
     *     <input type="submit" name="submitButton" value="Submit" />
     * </form>
     * ```
     *
     * You could write the following to submit it:
     *
     * ``` php
     * <?php
     * $I->submitForm(
     *     '#userForm',
     *     [
     *         'user[login]' => 'Davert',
     *         'user[password]' => '123456',
     *         'user[agree]' => true
     *     ],
     *     'submitButton'
     * );
     * ```
     * Note that "2" will be the submitted value for the "plan" field, as it is
     * the selected option.
     *
     * Also note that this differs from PhpBrowser, in that
     * ```'user' => [ 'login' => 'Davert' ]``` is not supported at the moment.
     * Named array keys *must* be included in the name as above.
     *
     * Pair this with seeInFormFields for quick testing magic.
     *
     * ``` php
     * <?php
     * $form = [
     *      'field1' => 'value',
     *      'field2' => 'another value',
     *      'checkbox1' => true,
     *      // ...
     * ];
     * $I->submitForm('//form[@id=my-form]', $form, 'submitButton');
     * // $I->amOnPage('/path/to/form-page') may be needed
     * $I->seeInFormFields('//form[@id=my-form]', $form);
     * ?>
     * ```
     *
     * Parameter values must be set to arrays for multiple input fields
     * of the same name, or multi-select combo boxes.  For checkboxes,
     * either the string value can be used, or boolean values which will
     * be replaced by the checkbox's value in the DOM.
     *
     * ``` php
     * <?php
     * $I->submitForm('#my-form', [
     *      'field1' => 'value',
     *      'checkbox' => [
     *          'value of first checkbox',
     *          'value of second checkbox',
     *      ],
     *      'otherCheckboxes' => [
     *          true,
     *          false,
     *          false,
     *      ],
     *      'multiselect' => [
     *          'first option value',
     *          'second option value',
     *      ]
     * ]);
     * ?>
     * ```
     *
     * Mixing string and boolean values for a checkbox's value is not supported
     * and may produce unexpected results.
     *
     * Field names ending in "[]" must be passed without the trailing square
     * bracket characters, and must contain an array for its value.  This allows
     * submitting multiple values with the same name, consider:
     *
     * ```php
     * $I->submitForm('#my-form', [
     *     'field[]' => 'value',
     *     'field[]' => 'another value', // 'field[]' is already a defined key
     * ]);
     * ```
     *
     * The solution is to pass an array value:
     *
     * ```php
     * // this way both values are submitted
     * $I->submitForm('#my-form', [
     *     'field' => [
     *         'value',
     *         'another value',
     *     ]
     * ]);
     * ```
     *
     * The `$button` parameter can be either a string, an array or an instance
     * of Facebook\WebDriver\WebDriverBy. When it is a string, the
     * button will be found by its "name" attribute. If $button is an
     * array then it will be treated as a strict selector and a WebDriverBy
     * will be used verbatim.
     *
     * For example, given the following HTML:
     *
     * ``` html
     * <input type="submit" name="submitButton" value="Submit" />
     * ```
     *
     * `$button` could be any one of the following:
     *   - 'submitButton'
     *   - ['name' => 'submitButton']
     *   - WebDriverBy::name('submitButton')
     *
     * @param $selector
     * @param $params
     * @param $button
     * @see \Codeception\Module\WebDriver::submitForm()
     */
    public function tryToSubmitForm($selector, $params, $button = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('submitForm', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes submitForm and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\WebDriver::submitForm()
     */
    public function retrySubmitForm($selector, $params, $button = null) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('submitForm', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Waits up to $timeout seconds for the given element to change.
     * Element "change" is determined by a callback function which is called repeatedly
     * until the return value evaluates to true.
     *
     * ``` php
     * <?php
     * use \Facebook\WebDriver\WebDriverElement
     * $I->waitForElementChange('#menu', function(WebDriverElement $el) {
     *     return $el->isDisplayed();
     * }, 100);
     * ?>
     * ```
     *
     * @param $element
     * @param \Closure $callback
     * @param int $timeout seconds
     * @throws \Codeception\Exception\ElementNotFound
     * @see \Codeception\Module\WebDriver::waitForElementChange()
     */
    public function waitForElementChange($element, $callback, $timeout = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('waitForElementChange', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Waits up to $timeout seconds for an element to appear on the page.
     * If the element doesn't appear, a timeout exception is thrown.
     *
     * ``` php
     * <?php
     * $I->waitForElement('#agree_button', 30); // secs
     * $I->click('#agree_button');
     * ?>
     * ```
     *
     * @param $element
     * @param int $timeout seconds
     * @throws \Exception
     * @see \Codeception\Module\WebDriver::waitForElement()
     */
    public function waitForElement($element, $timeout = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('waitForElement', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Waits up to $timeout seconds for the given element to be visible on the page.
     * If element doesn't appear, a timeout exception is thrown.
     *
     * ``` php
     * <?php
     * $I->waitForElementVisible('#agree_button', 30); // secs
     * $I->click('#agree_button');
     * ?>
     * ```
     *
     * @param $element
     * @param int $timeout seconds
     * @throws \Exception
     * @see \Codeception\Module\WebDriver::waitForElementVisible()
     */
    public function waitForElementVisible($element, $timeout = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('waitForElementVisible', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Waits up to $timeout seconds for the given element to become invisible.
     * If element stays visible, a timeout exception is thrown.
     *
     * ``` php
     * <?php
     * $I->waitForElementNotVisible('#agree_button', 30); // secs
     * ?>
     * ```
     *
     * @param $element
     * @param int $timeout seconds
     * @throws \Exception
     * @see \Codeception\Module\WebDriver::waitForElementNotVisible()
     */
    public function waitForElementNotVisible($element, $timeout = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('waitForElementNotVisible', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Waits up to $timeout seconds for the given element to be clickable.
     * If element doesn't become clickable, a timeout exception is thrown.
     *
     * ``` php
     * <?php
     * $I->waitForElementClickable('#agree_button', 30); // secs
     * $I->click('#agree_button');
     * ?>
     * ```
     *
     * @param $element
     * @param int $timeout seconds
     * @throws \Exception
     * @see \Codeception\Module\WebDriver::waitForElementClickable()
     */
    public function waitForElementClickable($element, $timeout = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('waitForElementClickable', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Waits up to $timeout seconds for the given string to appear on the page.
     *
     * Can also be passed a selector to search in, be as specific as possible when using selectors.
     * waitForText() will only watch the first instance of the matching selector / text provided.
     * If the given text doesn't appear, a timeout exception is thrown.
     *
     * ``` php
     * <?php
     * $I->waitForText('foo', 30); // secs
     * $I->waitForText('foo', 30, '.title'); // secs
     * ?>
     * ```
     *
     * @param string $text
     * @param int $timeout seconds
     * @param string $selector optional
     * @throws \Exception
     * @see \Codeception\Module\WebDriver::waitForText()
     */
    public function waitForText($text, $timeout = null, $selector = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('waitForText', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Wait for $timeout seconds.
     *
     * @param int|float $timeout secs
     * @throws \Codeception\Exception\TestRuntimeException
     * @see \Codeception\Module\WebDriver::wait()
     */
    public function wait($timeout) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('wait', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Low-level API method.
     * If Codeception commands are not enough, this allows you to use Selenium WebDriver methods directly:
     *
     * ``` php
     * $I->executeInSelenium(function(\Facebook\WebDriver\Remote\RemoteWebDriver $webdriver) {
     *   $webdriver->get('http://google.com');
     * });
     * ```
     *
     * This runs in the context of the
     * [RemoteWebDriver class](https://github.com/php-webdriver/php-webdriver/blob/master/lib/remote/RemoteWebDriver.php).
     * Try not to use this command on a regular basis.
     * If Codeception lacks a feature you need, please implement it and submit a patch.
     *
     * @param callable $function
     * @see \Codeception\Module\WebDriver::executeInSelenium()
     */
    public function executeInSelenium($function) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('executeInSelenium', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Low-level API method.
     * If Codeception commands are not enough, this allows you to use Selenium WebDriver methods directly:
     *
     * ``` php
     * $I->executeInSelenium(function(\Facebook\WebDriver\Remote\RemoteWebDriver $webdriver) {
     *   $webdriver->get('http://google.com');
     * });
     * ```
     *
     * This runs in the context of the
     * [RemoteWebDriver class](https://github.com/php-webdriver/php-webdriver/blob/master/lib/remote/RemoteWebDriver.php).
     * Try not to use this command on a regular basis.
     * If Codeception lacks a feature you need, please implement it and submit a patch.
     *
     * @param callable $function
     * @see \Codeception\Module\WebDriver::executeInSelenium()
     */
    public function tryToExecuteInSelenium($function) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('executeInSelenium', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes executeInSelenium and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\WebDriver::executeInSelenium()
     */
    public function retryExecuteInSelenium($function) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('executeInSelenium', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Switch to another window identified by name.
     *
     * The window can only be identified by name. If the $name parameter is blank, the parent window will be used.
     *
     * Example:
     * ``` html
     * <input type="button" value="Open window" onclick="window.open('http://example.com', 'another_window')">
     * ```
     *
     * ``` php
     * <?php
     * $I->click("Open window");
     * # switch to another window
     * $I->switchToWindow("another_window");
     * # switch to parent window
     * $I->switchToWindow();
     * ?>
     * ```
     *
     * If the window has no name, match it by switching to next active tab using `switchToNextTab` method.
     *
     * Or use native Selenium functions to get access to all opened windows:
     *
     * ``` php
     * <?php
     * $I->executeInSelenium(function (\Facebook\WebDriver\Remote\RemoteWebDriver $webdriver) {
     *      $handles=$webdriver->getWindowHandles();
     *      $last_window = end($handles);
     *      $webdriver->switchTo()->window($last_window);
     * });
     * ?>
     * ```
     *
     * @param string|null $name
     * @see \Codeception\Module\WebDriver::switchToWindow()
     */
    public function switchToWindow($name = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('switchToWindow', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Switch to another window identified by name.
     *
     * The window can only be identified by name. If the $name parameter is blank, the parent window will be used.
     *
     * Example:
     * ``` html
     * <input type="button" value="Open window" onclick="window.open('http://example.com', 'another_window')">
     * ```
     *
     * ``` php
     * <?php
     * $I->click("Open window");
     * # switch to another window
     * $I->switchToWindow("another_window");
     * # switch to parent window
     * $I->switchToWindow();
     * ?>
     * ```
     *
     * If the window has no name, match it by switching to next active tab using `switchToNextTab` method.
     *
     * Or use native Selenium functions to get access to all opened windows:
     *
     * ``` php
     * <?php
     * $I->executeInSelenium(function (\Facebook\WebDriver\Remote\RemoteWebDriver $webdriver) {
     *      $handles=$webdriver->getWindowHandles();
     *      $last_window = end($handles);
     *      $webdriver->switchTo()->window($last_window);
     * });
     * ?>
     * ```
     *
     * @param string|null $name
     * @see \Codeception\Module\WebDriver::switchToWindow()
     */
    public function tryToSwitchToWindow($name = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('switchToWindow', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes switchToWindow and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\WebDriver::switchToWindow()
     */
    public function retrySwitchToWindow($name = null) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('switchToWindow', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Switch to another iframe on the page.
     *
     * Example:
     * ``` html
     * <iframe name="another_frame" id="fr1" src="http://example.com">
     *
     * ```
     *
     * ``` php
     * <?php
     * # switch to iframe by name
     * $I->switchToIFrame("another_frame");
     * # switch to iframe by CSS or XPath
     * $I->switchToIFrame("#fr1");
     * # switch to parent page
     * $I->switchToIFrame();
     *
     * ```
     *
     * @param string|null $locator (name, CSS or XPath)
     * @see \Codeception\Module\WebDriver::switchToIFrame()
     */
    public function switchToIFrame($locator = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('switchToIFrame', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Switch to another iframe on the page.
     *
     * Example:
     * ``` html
     * <iframe name="another_frame" id="fr1" src="http://example.com">
     *
     * ```
     *
     * ``` php
     * <?php
     * # switch to iframe by name
     * $I->switchToIFrame("another_frame");
     * # switch to iframe by CSS or XPath
     * $I->switchToIFrame("#fr1");
     * # switch to parent page
     * $I->switchToIFrame();
     *
     * ```
     *
     * @param string|null $locator (name, CSS or XPath)
     * @see \Codeception\Module\WebDriver::switchToIFrame()
     */
    public function tryToSwitchToIFrame($locator = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('switchToIFrame', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes switchToIFrame and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\WebDriver::switchToIFrame()
     */
    public function retrySwitchToIFrame($locator = null) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('switchToIFrame', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Switch to another frame on the page.
     *
     * Example:
     * ``` html
     * <frame name="another_frame" id="fr1" src="http://example.com">
     *
     * ```
     *
     * ``` php
     * <?php
     * # switch to frame by name
     * $I->switchToFrame("another_frame");
     * # switch to frame by CSS or XPath
     * $I->switchToFrame("#fr1");
     * # switch to parent page
     * $I->switchToFrame();
     *
     * ```
     *
     * @param string|null $locator (name, CSS or XPath)
     * @see \Codeception\Module\WebDriver::switchToFrame()
     */
    public function switchToFrame($locator = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('switchToFrame', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Switch to another frame on the page.
     *
     * Example:
     * ``` html
     * <frame name="another_frame" id="fr1" src="http://example.com">
     *
     * ```
     *
     * ``` php
     * <?php
     * # switch to frame by name
     * $I->switchToFrame("another_frame");
     * # switch to frame by CSS or XPath
     * $I->switchToFrame("#fr1");
     * # switch to parent page
     * $I->switchToFrame();
     *
     * ```
     *
     * @param string|null $locator (name, CSS or XPath)
     * @see \Codeception\Module\WebDriver::switchToFrame()
     */
    public function tryToSwitchToFrame($locator = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('switchToFrame', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes switchToFrame and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\WebDriver::switchToFrame()
     */
    public function retrySwitchToFrame($locator = null) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('switchToFrame', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Executes JavaScript and waits up to $timeout seconds for it to return true.
     *
     * In this example we will wait up to 60 seconds for all jQuery AJAX requests to finish.
     *
     * ``` php
     * <?php
     * $I->waitForJS("return $.active == 0;", 60);
     * ?>
     * ```
     *
     * @param string $script
     * @param int $timeout seconds
     * @see \Codeception\Module\WebDriver::waitForJS()
     */
    public function waitForJS($script, $timeout = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('waitForJS', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Executes custom JavaScript.
     *
     * This example uses jQuery to get a value and assigns that value to a PHP variable:
     *
     * ```php
     * <?php
     * $myVar = $I->executeJS('return $("#myField").val()');
     *
     * // additional arguments can be passed as array
     * // Example shows `Hello World` alert:
     * $I->executeJS("window.alert(arguments[0])", ['Hello world']);
     * ```
     *
     * @param $script
     * @param array $arguments
     * @return mixed
     * @see \Codeception\Module\WebDriver::executeJS()
     */
    public function executeJS($script, $arguments = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('executeJS', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Executes custom JavaScript.
     *
     * This example uses jQuery to get a value and assigns that value to a PHP variable:
     *
     * ```php
     * <?php
     * $myVar = $I->executeJS('return $("#myField").val()');
     *
     * // additional arguments can be passed as array
     * // Example shows `Hello World` alert:
     * $I->executeJS("window.alert(arguments[0])", ['Hello world']);
     * ```
     *
     * @param $script
     * @param array $arguments
     * @return mixed
     * @see \Codeception\Module\WebDriver::executeJS()
     */
    public function tryToExecuteJS($script, $arguments = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('executeJS', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes executeJS and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\WebDriver::executeJS()
     */
    public function retryExecuteJS($script, $arguments = null) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('executeJS', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Executes asynchronous JavaScript.
     * A callback should be executed by JavaScript to exit from a script.
     * Callback is passed as a last element in `arguments` array.
     * Additional arguments can be passed as array in second parameter.
     *
     * ```js
     * // wait for 1200 milliseconds my running `setTimeout`
     * * $I->executeAsyncJS('setTimeout(arguments[0], 1200)');
     *
     * $seconds = 1200; // or seconds are passed as argument
     * $I->executeAsyncJS('setTimeout(arguments[1], arguments[0])', [$seconds]);
     * ```
     *
     * @param $script
     * @param array $arguments
     * @return mixed
     * @see \Codeception\Module\WebDriver::executeAsyncJS()
     */
    public function executeAsyncJS($script, $arguments = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('executeAsyncJS', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Executes asynchronous JavaScript.
     * A callback should be executed by JavaScript to exit from a script.
     * Callback is passed as a last element in `arguments` array.
     * Additional arguments can be passed as array in second parameter.
     *
     * ```js
     * // wait for 1200 milliseconds my running `setTimeout`
     * * $I->executeAsyncJS('setTimeout(arguments[0], 1200)');
     *
     * $seconds = 1200; // or seconds are passed as argument
     * $I->executeAsyncJS('setTimeout(arguments[1], arguments[0])', [$seconds]);
     * ```
     *
     * @param $script
     * @param array $arguments
     * @return mixed
     * @see \Codeception\Module\WebDriver::executeAsyncJS()
     */
    public function tryToExecuteAsyncJS($script, $arguments = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('executeAsyncJS', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes executeAsyncJS and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\WebDriver::executeAsyncJS()
     */
    public function retryExecuteAsyncJS($script, $arguments = null) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('executeAsyncJS', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Maximizes the current window.
     * @see \Codeception\Module\WebDriver::maximizeWindow()
     */
    public function maximizeWindow() {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('maximizeWindow', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Maximizes the current window.
     * @see \Codeception\Module\WebDriver::maximizeWindow()
     */
    public function tryToMaximizeWindow() {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('maximizeWindow', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes maximizeWindow and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\WebDriver::maximizeWindow()
     */
    public function retryMaximizeWindow() {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('maximizeWindow', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Performs a simple mouse drag-and-drop operation.
     *
     * ``` php
     * <?php
     * $I->dragAndDrop('#drag', '#drop');
     * ?>
     * ```
     *
     * @param string $source (CSS ID or XPath)
     * @param string $target (CSS ID or XPath)
     * @see \Codeception\Module\WebDriver::dragAndDrop()
     */
    public function dragAndDrop($source, $target) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('dragAndDrop', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Performs a simple mouse drag-and-drop operation.
     *
     * ``` php
     * <?php
     * $I->dragAndDrop('#drag', '#drop');
     * ?>
     * ```
     *
     * @param string $source (CSS ID or XPath)
     * @param string $target (CSS ID or XPath)
     * @see \Codeception\Module\WebDriver::dragAndDrop()
     */
    public function tryToDragAndDrop($source, $target) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('dragAndDrop', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes dragAndDrop and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\WebDriver::dragAndDrop()
     */
    public function retryDragAndDrop($source, $target) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('dragAndDrop', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Move mouse over the first element matched by the given locator.
     * If the first parameter null then the page is used.
     * If the second and third parameters are given,
     * then the mouse is moved to an offset of the element's top-left corner.
     * Otherwise, the mouse is moved to the center of the element.
     *
     * ``` php
     * <?php
     * $I->moveMouseOver(['css' => '.checkout']);
     * $I->moveMouseOver(null, 20, 50);
     * $I->moveMouseOver(['css' => '.checkout'], 20, 50);
     * ?>
     * ```
     *
     * @param string $cssOrXPath css or xpath of the web element
     * @param int $offsetX
     * @param int $offsetY
     *
     * @throws \Codeception\Exception\ElementNotFound
     * @see \Codeception\Module\WebDriver::moveMouseOver()
     */
    public function moveMouseOver($cssOrXPath = null, $offsetX = null, $offsetY = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('moveMouseOver', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Move mouse over the first element matched by the given locator.
     * If the first parameter null then the page is used.
     * If the second and third parameters are given,
     * then the mouse is moved to an offset of the element's top-left corner.
     * Otherwise, the mouse is moved to the center of the element.
     *
     * ``` php
     * <?php
     * $I->moveMouseOver(['css' => '.checkout']);
     * $I->moveMouseOver(null, 20, 50);
     * $I->moveMouseOver(['css' => '.checkout'], 20, 50);
     * ?>
     * ```
     *
     * @param string $cssOrXPath css or xpath of the web element
     * @param int $offsetX
     * @param int $offsetY
     *
     * @throws \Codeception\Exception\ElementNotFound
     * @see \Codeception\Module\WebDriver::moveMouseOver()
     */
    public function tryToMoveMouseOver($cssOrXPath = null, $offsetX = null, $offsetY = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('moveMouseOver', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes moveMouseOver and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\WebDriver::moveMouseOver()
     */
    public function retryMoveMouseOver($cssOrXPath = null, $offsetX = null, $offsetY = null) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('moveMouseOver', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Performs click with the left mouse button on an element.
     * If the first parameter `null` then the offset is relative to the actual mouse position.
     * If the second and third parameters are given,
     * then the mouse is moved to an offset of the element's top-left corner.
     * Otherwise, the mouse is moved to the center of the element.
     *
     * ``` php
     * <?php
     * $I->clickWithLeftButton(['css' => '.checkout']);
     * $I->clickWithLeftButton(null, 20, 50);
     * $I->clickWithLeftButton(['css' => '.checkout'], 20, 50);
     * ?>
     * ```
     *
     * @param string $cssOrXPath css or xpath of the web element (body by default).
     * @param int $offsetX
     * @param int $offsetY
     *
     * @throws \Codeception\Exception\ElementNotFound
     * @see \Codeception\Module\WebDriver::clickWithLeftButton()
     */
    public function clickWithLeftButton($cssOrXPath = null, $offsetX = null, $offsetY = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('clickWithLeftButton', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Performs click with the left mouse button on an element.
     * If the first parameter `null` then the offset is relative to the actual mouse position.
     * If the second and third parameters are given,
     * then the mouse is moved to an offset of the element's top-left corner.
     * Otherwise, the mouse is moved to the center of the element.
     *
     * ``` php
     * <?php
     * $I->clickWithLeftButton(['css' => '.checkout']);
     * $I->clickWithLeftButton(null, 20, 50);
     * $I->clickWithLeftButton(['css' => '.checkout'], 20, 50);
     * ?>
     * ```
     *
     * @param string $cssOrXPath css or xpath of the web element (body by default).
     * @param int $offsetX
     * @param int $offsetY
     *
     * @throws \Codeception\Exception\ElementNotFound
     * @see \Codeception\Module\WebDriver::clickWithLeftButton()
     */
    public function tryToClickWithLeftButton($cssOrXPath = null, $offsetX = null, $offsetY = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('clickWithLeftButton', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes clickWithLeftButton and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\WebDriver::clickWithLeftButton()
     */
    public function retryClickWithLeftButton($cssOrXPath = null, $offsetX = null, $offsetY = null) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('clickWithLeftButton', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Performs contextual click with the right mouse button on an element.
     * If the first parameter `null` then the offset is relative to the actual mouse position.
     * If the second and third parameters are given,
     * then the mouse is moved to an offset of the element's top-left corner.
     * Otherwise, the mouse is moved to the center of the element.
     *
     * ``` php
     * <?php
     * $I->clickWithRightButton(['css' => '.checkout']);
     * $I->clickWithRightButton(null, 20, 50);
     * $I->clickWithRightButton(['css' => '.checkout'], 20, 50);
     * ?>
     * ```
     *
     * @param string $cssOrXPath css or xpath of the web element (body by default).
     * @param int $offsetX
     * @param int $offsetY
     *
     * @throws \Codeception\Exception\ElementNotFound
     * @see \Codeception\Module\WebDriver::clickWithRightButton()
     */
    public function clickWithRightButton($cssOrXPath = null, $offsetX = null, $offsetY = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('clickWithRightButton', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Performs contextual click with the right mouse button on an element.
     * If the first parameter `null` then the offset is relative to the actual mouse position.
     * If the second and third parameters are given,
     * then the mouse is moved to an offset of the element's top-left corner.
     * Otherwise, the mouse is moved to the center of the element.
     *
     * ``` php
     * <?php
     * $I->clickWithRightButton(['css' => '.checkout']);
     * $I->clickWithRightButton(null, 20, 50);
     * $I->clickWithRightButton(['css' => '.checkout'], 20, 50);
     * ?>
     * ```
     *
     * @param string $cssOrXPath css or xpath of the web element (body by default).
     * @param int $offsetX
     * @param int $offsetY
     *
     * @throws \Codeception\Exception\ElementNotFound
     * @see \Codeception\Module\WebDriver::clickWithRightButton()
     */
    public function tryToClickWithRightButton($cssOrXPath = null, $offsetX = null, $offsetY = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('clickWithRightButton', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes clickWithRightButton and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\WebDriver::clickWithRightButton()
     */
    public function retryClickWithRightButton($cssOrXPath = null, $offsetX = null, $offsetY = null) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('clickWithRightButton', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Performs a double-click on an element matched by CSS or XPath.
     *
     * @param $cssOrXPath
     * @throws \Codeception\Exception\ElementNotFound
     * @see \Codeception\Module\WebDriver::doubleClick()
     */
    public function doubleClick($cssOrXPath) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('doubleClick', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Performs a double-click on an element matched by CSS or XPath.
     *
     * @param $cssOrXPath
     * @throws \Codeception\Exception\ElementNotFound
     * @see \Codeception\Module\WebDriver::doubleClick()
     */
    public function tryToDoubleClick($cssOrXPath) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('doubleClick', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes doubleClick and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\WebDriver::doubleClick()
     */
    public function retryDoubleClick($cssOrXPath) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('doubleClick', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Presses the given key on the given element.
     * To specify a character and modifier (e.g. ctrl, alt, shift, meta), pass an array for $char with
     * the modifier as the first element and the character as the second.
     * For special keys use key constants from WebDriverKeys class.
     *
     * ``` php
     * <?php
     * // <input id="page" value="old" />
     * $I->pressKey('#page','a'); // => olda
     * $I->pressKey('#page',array('ctrl','a'),'new'); //=> new
     * $I->pressKey('#page',array('shift','111'),'1','x'); //=> old!!!1x
     * $I->pressKey('descendant-or-self::*[@id='page']','u'); //=> oldu
     * $I->pressKey('#name', array('ctrl', 'a'), \Facebook\WebDriver\WebDriverKeys::DELETE); //=>''
     * ?>
     * ```
     *
     * @param $element
     * @param $char string|array Can be char or array with modifier. You can provide several chars.
     * @throws \Codeception\Exception\ElementNotFound
     * @see \Codeception\Module\WebDriver::pressKey()
     */
    public function pressKey($element, $char) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('pressKey', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Presses the given key on the given element.
     * To specify a character and modifier (e.g. ctrl, alt, shift, meta), pass an array for $char with
     * the modifier as the first element and the character as the second.
     * For special keys use key constants from WebDriverKeys class.
     *
     * ``` php
     * <?php
     * // <input id="page" value="old" />
     * $I->pressKey('#page','a'); // => olda
     * $I->pressKey('#page',array('ctrl','a'),'new'); //=> new
     * $I->pressKey('#page',array('shift','111'),'1','x'); //=> old!!!1x
     * $I->pressKey('descendant-or-self::*[@id='page']','u'); //=> oldu
     * $I->pressKey('#name', array('ctrl', 'a'), \Facebook\WebDriver\WebDriverKeys::DELETE); //=>''
     * ?>
     * ```
     *
     * @param $element
     * @param $char string|array Can be char or array with modifier. You can provide several chars.
     * @throws \Codeception\Exception\ElementNotFound
     * @see \Codeception\Module\WebDriver::pressKey()
     */
    public function tryToPressKey($element, $char) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('pressKey', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes pressKey and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\WebDriver::pressKey()
     */
    public function retryPressKey($element, $char) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('pressKey', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Append the given text to the given element.
     * Can also add a selection to a select box.
     *
     * ``` php
     * <?php
     * $I->appendField('#mySelectbox', 'SelectValue');
     * $I->appendField('#myTextField', 'appended');
     * ?>
     * ```
     *
     * @param string $field
     * @param string $value
     * @throws \Codeception\Exception\ElementNotFound
     * @see \Codeception\Module\WebDriver::appendField()
     */
    public function appendField($field, $value) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('appendField', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Append the given text to the given element.
     * Can also add a selection to a select box.
     *
     * ``` php
     * <?php
     * $I->appendField('#mySelectbox', 'SelectValue');
     * $I->appendField('#myTextField', 'appended');
     * ?>
     * ```
     *
     * @param string $field
     * @param string $value
     * @throws \Codeception\Exception\ElementNotFound
     * @see \Codeception\Module\WebDriver::appendField()
     */
    public function tryToAppendField($field, $value) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('appendField', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes appendField and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\WebDriver::appendField()
     */
    public function retryAppendField($field, $value) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('appendField', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Saves current cookies into named snapshot in order to restore them in other tests
     * This is useful to save session state between tests.
     * For example, if user needs log in to site for each test this scenario can be executed once
     * while other tests can just restore saved cookies.
     *
     * ``` php
     * <?php
     * // inside AcceptanceTester class:
     *
     * public function login()
     * {
     *      // if snapshot exists - skipping login
     *      if ($I->loadSessionSnapshot('login')) return;
     *
     *      // logging in
     *      $I->amOnPage('/login');
     *      $I->fillField('name', 'jon');
     *      $I->fillField('password', '123345');
     *      $I->click('Login');
     *
     *      // saving snapshot
     *      $I->saveSessionSnapshot('login');
     * }
     * ?>
     * ```
     *
     * @param $name
     * @return mixed
     * @see \Codeception\Module\WebDriver::saveSessionSnapshot()
     */
    public function saveSessionSnapshot($name) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('saveSessionSnapshot', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Saves current cookies into named snapshot in order to restore them in other tests
     * This is useful to save session state between tests.
     * For example, if user needs log in to site for each test this scenario can be executed once
     * while other tests can just restore saved cookies.
     *
     * ``` php
     * <?php
     * // inside AcceptanceTester class:
     *
     * public function login()
     * {
     *      // if snapshot exists - skipping login
     *      if ($I->loadSessionSnapshot('login')) return;
     *
     *      // logging in
     *      $I->amOnPage('/login');
     *      $I->fillField('name', 'jon');
     *      $I->fillField('password', '123345');
     *      $I->click('Login');
     *
     *      // saving snapshot
     *      $I->saveSessionSnapshot('login');
     * }
     * ?>
     * ```
     *
     * @param $name
     * @return mixed
     * @see \Codeception\Module\WebDriver::saveSessionSnapshot()
     */
    public function tryToSaveSessionSnapshot($name) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('saveSessionSnapshot', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes saveSessionSnapshot and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\WebDriver::saveSessionSnapshot()
     */
    public function retrySaveSessionSnapshot($name) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('saveSessionSnapshot', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Loads cookies from a saved snapshot.
     * Allows to reuse same session across tests without additional login.
     *
     * See [saveSessionSnapshot](#saveSessionSnapshot)
     *
     * @param $name
     * @return mixed
     * @see \Codeception\Module\WebDriver::loadSessionSnapshot()
     */
    public function loadSessionSnapshot($name) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('loadSessionSnapshot', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Loads cookies from a saved snapshot.
     * Allows to reuse same session across tests without additional login.
     *
     * See [saveSessionSnapshot](#saveSessionSnapshot)
     *
     * @param $name
     * @return mixed
     * @see \Codeception\Module\WebDriver::loadSessionSnapshot()
     */
    public function tryToLoadSessionSnapshot($name) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('loadSessionSnapshot', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes loadSessionSnapshot and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\WebDriver::loadSessionSnapshot()
     */
    public function retryLoadSessionSnapshot($name) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('loadSessionSnapshot', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Deletes session snapshot.
     *
     * See [saveSessionSnapshot](#saveSessionSnapshot)
     *
     * @param $name
     * @return mixed
     * @see \Codeception\Module\WebDriver::deleteSessionSnapshot()
     */
    public function deleteSessionSnapshot($name) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('deleteSessionSnapshot', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Deletes session snapshot.
     *
     * See [saveSessionSnapshot](#saveSessionSnapshot)
     *
     * @param $name
     * @return mixed
     * @see \Codeception\Module\WebDriver::deleteSessionSnapshot()
     */
    public function tryToDeleteSessionSnapshot($name) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('deleteSessionSnapshot', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes deleteSessionSnapshot and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\WebDriver::deleteSessionSnapshot()
     */
    public function retryDeleteSessionSnapshot($name) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('deleteSessionSnapshot', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Move to the middle of the given element matched by the given locator.
     * Extra shift, calculated from the top-left corner of the element,
     * can be set by passing $offsetX and $offsetY parameters.
     *
     * ``` php
     * <?php
     * $I->scrollTo(['css' => '.checkout'], 20, 50);
     * ?>
     * ```
     *
     * @param $selector
     * @param int $offsetX
     * @param int $offsetY
     * @see \Codeception\Module\WebDriver::scrollTo()
     */
    public function scrollTo($selector, $offsetX = null, $offsetY = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('scrollTo', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Move to the middle of the given element matched by the given locator.
     * Extra shift, calculated from the top-left corner of the element,
     * can be set by passing $offsetX and $offsetY parameters.
     *
     * ``` php
     * <?php
     * $I->scrollTo(['css' => '.checkout'], 20, 50);
     * ?>
     * ```
     *
     * @param $selector
     * @param int $offsetX
     * @param int $offsetY
     * @see \Codeception\Module\WebDriver::scrollTo()
     */
    public function tryToScrollTo($selector, $offsetX = null, $offsetY = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('scrollTo', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes scrollTo and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\WebDriver::scrollTo()
     */
    public function retryScrollTo($selector, $offsetX = null, $offsetY = null) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('scrollTo', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Opens a new browser tab (wherever it is possible) and switches to it.
     *
     * ```php
     * <?php
     * $I->openNewTab();
     * ```
     * Tab is opened by using `window.open` javascript in a browser.
     * Please note, that adblock can restrict creating such tabs.
     *
     * Can't be used with PhantomJS
     *
     * @see \Codeception\Module\WebDriver::openNewTab()
     */
    public function openNewTab() {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('openNewTab', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Opens a new browser tab (wherever it is possible) and switches to it.
     *
     * ```php
     * <?php
     * $I->openNewTab();
     * ```
     * Tab is opened by using `window.open` javascript in a browser.
     * Please note, that adblock can restrict creating such tabs.
     *
     * Can't be used with PhantomJS
     *
     * @see \Codeception\Module\WebDriver::openNewTab()
     */
    public function tryToOpenNewTab() {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('openNewTab', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes openNewTab and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\WebDriver::openNewTab()
     */
    public function retryOpenNewTab() {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('openNewTab', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Closes current browser tab and switches to previous active tab.
     *
     * ```php
     * <?php
     * $I->closeTab();
     * ```
     *
     * Can't be used with PhantomJS
     * @see \Codeception\Module\WebDriver::closeTab()
     */
    public function closeTab() {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('closeTab', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Closes current browser tab and switches to previous active tab.
     *
     * ```php
     * <?php
     * $I->closeTab();
     * ```
     *
     * Can't be used with PhantomJS
     * @see \Codeception\Module\WebDriver::closeTab()
     */
    public function tryToCloseTab() {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('closeTab', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes closeTab and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\WebDriver::closeTab()
     */
    public function retryCloseTab() {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('closeTab', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Switches to next browser tab.
     * An offset can be specified.
     *
     * ```php
     * <?php
     * // switch to next tab
     * $I->switchToNextTab();
     * // switch to 2nd next tab
     * $I->switchToNextTab(2);
     * ```
     *
     * Can't be used with PhantomJS
     *
     * @param int $offset 1
     * @see \Codeception\Module\WebDriver::switchToNextTab()
     */
    public function switchToNextTab($offset = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('switchToNextTab', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Switches to next browser tab.
     * An offset can be specified.
     *
     * ```php
     * <?php
     * // switch to next tab
     * $I->switchToNextTab();
     * // switch to 2nd next tab
     * $I->switchToNextTab(2);
     * ```
     *
     * Can't be used with PhantomJS
     *
     * @param int $offset 1
     * @see \Codeception\Module\WebDriver::switchToNextTab()
     */
    public function tryToSwitchToNextTab($offset = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('switchToNextTab', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes switchToNextTab and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\WebDriver::switchToNextTab()
     */
    public function retrySwitchToNextTab($offset = null) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('switchToNextTab', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Switches to previous browser tab.
     * An offset can be specified.
     *
     * ```php
     * <?php
     * // switch to previous tab
     * $I->switchToPreviousTab();
     * // switch to 2nd previous tab
     * $I->switchToPreviousTab(2);
     * ```
     *
     * Can't be used with PhantomJS
     *
     * @param int $offset 1
     * @see \Codeception\Module\WebDriver::switchToPreviousTab()
     */
    public function switchToPreviousTab($offset = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('switchToPreviousTab', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Switches to previous browser tab.
     * An offset can be specified.
     *
     * ```php
     * <?php
     * // switch to previous tab
     * $I->switchToPreviousTab();
     * // switch to 2nd previous tab
     * $I->switchToPreviousTab(2);
     * ```
     *
     * Can't be used with PhantomJS
     *
     * @param int $offset 1
     * @see \Codeception\Module\WebDriver::switchToPreviousTab()
     */
    public function tryToSwitchToPreviousTab($offset = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('switchToPreviousTab', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes switchToPreviousTab and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\WebDriver::switchToPreviousTab()
     */
    public function retrySwitchToPreviousTab($offset = null) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('switchToPreviousTab', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Waits for element and runs a sequence of actions inside its context.
     * Actions can be defined with array, callback, or `Codeception\Util\ActionSequence` instance.
     *
     * Actions as array are recommended for simple to combine "waitForElement" with assertions;
     * `waitForElement($el)` and `see('text', $el)` can be simplified to:
     *
     * ```php
     * <?php
     * $I->performOn($el, ['see' => 'text']);
     * ```
     *
     * List of actions can be pragmatically build using `Codeception\Util\ActionSequence`:
     *
     * ```php
     * <?php
     * $I->performOn('.model', ActionSequence::build()
     *     ->see('Warning')
     *     ->see('Are you sure you want to delete this?')
     *     ->click('Yes')
     * );
     * ```
     *
     * Actions executed from array or ActionSequence will print debug output for actions, and adds an action name to
     * exception on failure.
     *
     * Whenever you need to define more actions a callback can be used. A WebDriver module is passed for argument:
     *
     * ```php
     * <?php
     * $I->performOn('.rememberMe', function (WebDriver $I) {
     *      $I->see('Remember me next time');
     *      $I->seeElement('#LoginForm_rememberMe');
     *      $I->dontSee('Login');
     * });
     * ```
     *
     * In 3rd argument you can set number a seconds to wait for element to appear
     *
     * @param $element
     * @param $actions
     * @param int $timeout
     * @see \Codeception\Module\WebDriver::performOn()
     */
    public function performOn($element, $actions, $timeout = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('performOn', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Waits for element and runs a sequence of actions inside its context.
     * Actions can be defined with array, callback, or `Codeception\Util\ActionSequence` instance.
     *
     * Actions as array are recommended for simple to combine "waitForElement" with assertions;
     * `waitForElement($el)` and `see('text', $el)` can be simplified to:
     *
     * ```php
     * <?php
     * $I->performOn($el, ['see' => 'text']);
     * ```
     *
     * List of actions can be pragmatically build using `Codeception\Util\ActionSequence`:
     *
     * ```php
     * <?php
     * $I->performOn('.model', ActionSequence::build()
     *     ->see('Warning')
     *     ->see('Are you sure you want to delete this?')
     *     ->click('Yes')
     * );
     * ```
     *
     * Actions executed from array or ActionSequence will print debug output for actions, and adds an action name to
     * exception on failure.
     *
     * Whenever you need to define more actions a callback can be used. A WebDriver module is passed for argument:
     *
     * ```php
     * <?php
     * $I->performOn('.rememberMe', function (WebDriver $I) {
     *      $I->see('Remember me next time');
     *      $I->seeElement('#LoginForm_rememberMe');
     *      $I->dontSee('Login');
     * });
     * ```
     *
     * In 3rd argument you can set number a seconds to wait for element to appear
     *
     * @param $element
     * @param $actions
     * @param int $timeout
     * @see \Codeception\Module\WebDriver::performOn()
     */
    public function tryToPerformOn($element, $actions, $timeout = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('performOn', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes performOn and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\WebDriver::performOn()
     */
    public function retryPerformOn($element, $actions, $timeout = null) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('performOn', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     *
     * @see \Guidance\Tests\Base\Actor\Helper\Common::scrollToTop()
     */
    public function scrollToTop() {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('scrollToTop', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     *
     * @see \Guidance\Tests\Base\Actor\Helper\Common::scrollToTop()
     */
    public function tryToScrollToTop() {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('scrollToTop', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes scrollToTop and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Guidance\Tests\Base\Actor\Helper\Common::scrollToTop()
     */
    public function retryScrollToTop() {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('scrollToTop', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     *
     * @see \Guidance\Tests\Base\Actor\Helper\Common::scrollToBottom()
     */
    public function scrollToBottom() {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('scrollToBottom', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     *
     * @see \Guidance\Tests\Base\Actor\Helper\Common::scrollToBottom()
     */
    public function tryToScrollToBottom() {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('scrollToBottom', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes scrollToBottom and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Guidance\Tests\Base\Actor\Helper\Common::scrollToBottom()
     */
    public function retryScrollToBottom() {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('scrollToBottom', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     *
     * @see \Guidance\Tests\Base\Actor\Helper\Common::fillSensitiveField()
     */
    public function fillSensitiveField($field, $value) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('fillSensitiveField', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     *
     * @see \Guidance\Tests\Base\Actor\Helper\Common::fillSensitiveField()
     */
    public function tryToFillSensitiveField($field, $value) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('fillSensitiveField', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes fillSensitiveField and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Guidance\Tests\Base\Actor\Helper\Common::fillSensitiveField()
     */
    public function retryFillSensitiveField($field, $value) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('fillSensitiveField', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     *
     * @see \Guidance\Tests\Base\Actor\Helper\Common::selectRandomOption()
     */
    public function selectRandomOption($cssSelector, $excludeFirstOption = null): string {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('selectRandomOption', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     *
     * @see \Guidance\Tests\Base\Actor\Helper\Common::selectRandomOption()
     */
    public function tryToSelectRandomOption($cssSelector, $excludeFirstOption = null): string {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('selectRandomOption', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes selectRandomOption and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Guidance\Tests\Base\Actor\Helper\Common::selectRandomOption()
     */
    public function retrySelectRandomOption($cssSelector, $excludeFirstOption = null) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('selectRandomOption', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     *
     * @see \Guidance\Tests\Base\Actor\Helper\Common::selectRandomMultipleOption()
     */
    public function selectRandomMultipleOption($cssSelector, $optionsAmount = null): array {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('selectRandomMultipleOption', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     *
     * @see \Guidance\Tests\Base\Actor\Helper\Common::selectRandomMultipleOption()
     */
    public function tryToSelectRandomMultipleOption($cssSelector, $optionsAmount = null): array {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('selectRandomMultipleOption', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes selectRandomMultipleOption and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Guidance\Tests\Base\Actor\Helper\Common::selectRandomMultipleOption()
     */
    public function retrySelectRandomMultipleOption($cssSelector, $optionsAmount = null) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('selectRandomMultipleOption', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     *
     * @see \Guidance\Tests\Base\Actor\Helper\Common::grabAllCookies()
     */
    public function grabAllCookies(): array {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('grabAllCookies', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes grabAllCookies and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Guidance\Tests\Base\Actor\Helper\Common::grabAllCookies()
     */
    public function retryGrabAllCookies() {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('grabAllCookies', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     *
     * @see \Guidance\Tests\Base\Actor\Helper\Common::reconfigureUrl()
     */
    public function reconfigureUrl($url = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('reconfigureUrl', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     *
     * @see \Guidance\Tests\Base\Actor\Helper\Common::reconfigureUrl()
     */
    public function tryToReconfigureUrl($url = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('reconfigureUrl', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes reconfigureUrl and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Guidance\Tests\Base\Actor\Helper\Common::reconfigureUrl()
     */
    public function retryReconfigureUrl($url = null) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('reconfigureUrl', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     *
     * @see \Guidance\Tests\Base\Actor\Helper\Common::getUrlDomainName()
     */
    public function getUrlDomainName(): string {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('getUrlDomainName', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     *
     * @see \Guidance\Tests\Base\Actor\Helper\Common::getUrlDomainName()
     */
    public function tryToGetUrlDomainName(): string {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('getUrlDomainName', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes getUrlDomainName and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Guidance\Tests\Base\Actor\Helper\Common::getUrlDomainName()
     */
    public function retryGetUrlDomainName() {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('getUrlDomainName', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     *
     * @see \Guidance\Tests\Base\Actor\Helper\Common::getUrl()
     */
    public function getUrl(): string {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('getUrl', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     *
     * @see \Guidance\Tests\Base\Actor\Helper\Common::getUrl()
     */
    public function tryToGetUrl(): string {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('getUrl', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes getUrl and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Guidance\Tests\Base\Actor\Helper\Common::getUrl()
     */
    public function retryGetUrl() {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('getUrl', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     *
     * @see \Guidance\Tests\Base\Actor\Helper\Common::getUrlResourceAddress()
     */
    public function getUrlResourceAddress(): string {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('getUrlResourceAddress', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     *
     * @see \Guidance\Tests\Base\Actor\Helper\Common::getUrlResourceAddress()
     */
    public function tryToGetUrlResourceAddress(): string {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('getUrlResourceAddress', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes getUrlResourceAddress and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Guidance\Tests\Base\Actor\Helper\Common::getUrlResourceAddress()
     */
    public function retryGetUrlResourceAddress() {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('getUrlResourceAddress', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     *
     * @see \Guidance\Tests\Base\Actor\Helper\Common::getIdFromCurrentUrl()
     */
    public function getIdFromCurrentUrl(): string {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('getIdFromCurrentUrl', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     *
     * @see \Guidance\Tests\Base\Actor\Helper\Common::getIdFromCurrentUrl()
     */
    public function tryToGetIdFromCurrentUrl(): string {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('getIdFromCurrentUrl', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes getIdFromCurrentUrl and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Guidance\Tests\Base\Actor\Helper\Common::getIdFromCurrentUrl()
     */
    public function retryGetIdFromCurrentUrl() {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('getIdFromCurrentUrl', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     *
     * @see \Guidance\Tests\Base\Actor\Helper\Tab::openUrlInCurrentTab()
     */
    public function openUrlInCurrentTab($url) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('openUrlInCurrentTab', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     *
     * @see \Guidance\Tests\Base\Actor\Helper\Tab::openUrlInCurrentTab()
     */
    public function tryToOpenUrlInCurrentTab($url) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('openUrlInCurrentTab', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes openUrlInCurrentTab and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Guidance\Tests\Base\Actor\Helper\Tab::openUrlInCurrentTab()
     */
    public function retryOpenUrlInCurrentTab($url) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('openUrlInCurrentTab', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     *
     * @see \Guidance\Tests\Base\Actor\Helper\Tab::openUrlInNewTab()
     */
    public function openUrlInNewTab($url) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('openUrlInNewTab', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     *
     * @see \Guidance\Tests\Base\Actor\Helper\Tab::openUrlInNewTab()
     */
    public function tryToOpenUrlInNewTab($url) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('openUrlInNewTab', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes openUrlInNewTab and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Guidance\Tests\Base\Actor\Helper\Tab::openUrlInNewTab()
     */
    public function retryOpenUrlInNewTab($url) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('openUrlInNewTab', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     *
     * @see \Guidance\Tests\Base\Actor\Helper\Tab::openUrlInNewTabOverFixedTime()
     */
    public function openUrlInNewTabOverFixedTime($url, $timeout = null, $callback = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('openUrlInNewTabOverFixedTime', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     *
     * @see \Guidance\Tests\Base\Actor\Helper\Tab::openUrlInNewTabOverFixedTime()
     */
    public function tryToOpenUrlInNewTabOverFixedTime($url, $timeout = null, $callback = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('openUrlInNewTabOverFixedTime', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes openUrlInNewTabOverFixedTime and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Guidance\Tests\Base\Actor\Helper\Tab::openUrlInNewTabOverFixedTime()
     */
    public function retryOpenUrlInNewTabOverFixedTime($url, $timeout = null, $callback = null) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('openUrlInNewTabOverFixedTime', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     *
     * @see \Guidance\Tests\Base\Actor\Helper\Tab::getWindowHandle()
     */
    public function getWindowHandle(): string {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('getWindowHandle', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     *
     * @see \Guidance\Tests\Base\Actor\Helper\Tab::getWindowHandle()
     */
    public function tryToGetWindowHandle(): string {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('getWindowHandle', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes getWindowHandle and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Guidance\Tests\Base\Actor\Helper\Tab::getWindowHandle()
     */
    public function retryGetWindowHandle() {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('getWindowHandle', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     *
     * @see \Guidance\Tests\Base\Actor\Helper\Tab::getWindowHandles()
     */
    public function getWindowHandles(): array {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('getWindowHandles', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     *
     * @see \Guidance\Tests\Base\Actor\Helper\Tab::getWindowHandles()
     */
    public function tryToGetWindowHandles(): array {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('getWindowHandles', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes getWindowHandles and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Guidance\Tests\Base\Actor\Helper\Tab::getWindowHandles()
     */
    public function retryGetWindowHandles() {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('getWindowHandles', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     *
     * @see \Guidance\Tests\Base\Actor\Helper\Tab::getOpenedTabsCount()
     */
    public function getOpenedTabsCount(): int {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('getOpenedTabsCount', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     *
     * @see \Guidance\Tests\Base\Actor\Helper\Tab::getOpenedTabsCount()
     */
    public function tryToGetOpenedTabsCount(): int {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('getOpenedTabsCount', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes getOpenedTabsCount and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Guidance\Tests\Base\Actor\Helper\Tab::getOpenedTabsCount()
     */
    public function retryGetOpenedTabsCount() {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('getOpenedTabsCount', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     *
     * @see \Guidance\Tests\Base\Actor\Helper\Tab::haveOpenedTabsCount()
     */
    public function haveOpenedTabsCount($tabsCount) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('haveOpenedTabsCount', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     *
     * @see \Guidance\Tests\Base\Actor\Helper\Tab::switchToFirstTab()
     */
    public function switchToFirstTab() {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('switchToFirstTab', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     *
     * @see \Guidance\Tests\Base\Actor\Helper\Tab::switchToFirstTab()
     */
    public function tryToSwitchToFirstTab() {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('switchToFirstTab', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes switchToFirstTab and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Guidance\Tests\Base\Actor\Helper\Tab::switchToFirstTab()
     */
    public function retrySwitchToFirstTab() {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('switchToFirstTab', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     *
     * @see \Guidance\Tests\Base\Actor\Helper\Tab::switchToLastTab()
     */
    public function switchToLastTab() {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('switchToLastTab', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     *
     * @see \Guidance\Tests\Base\Actor\Helper\Tab::switchToLastTab()
     */
    public function tryToSwitchToLastTab() {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('switchToLastTab', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes switchToLastTab and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Guidance\Tests\Base\Actor\Helper\Tab::switchToLastTab()
     */
    public function retrySwitchToLastTab() {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('switchToLastTab', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     *
     * @see \Guidance\Tests\Base\Actor\Helper\Tab::switchToTabByHandle()
     */
    public function switchToTabByHandle($handle) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('switchToTabByHandle', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     *
     * @see \Guidance\Tests\Base\Actor\Helper\Tab::switchToTabByHandle()
     */
    public function tryToSwitchToTabByHandle($handle) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('switchToTabByHandle', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes switchToTabByHandle and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Guidance\Tests\Base\Actor\Helper\Tab::switchToTabByHandle()
     */
    public function retrySwitchToTabByHandle($handle) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('switchToTabByHandle', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     *
     * @see \Guidance\Tests\Base\Actor\Helper\Wait::waitForJsObjectLoad()
     */
    public function waitForJsObjectLoad($objectName, $timeout = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('waitForJsObjectLoad', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     *
     * @see \Guidance\Tests\Base\Actor\Helper\Wait::waitForPageLoad()
     */
    public function waitForPageLoad($timeout = null, $callback = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('waitForPageLoad', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     *
     * @see \Guidance\Tests\Base\Actor\Helper\LogProvider::getAvailableLogTypes()
     */
    public function getAvailableLogTypes(): array {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('getAvailableLogTypes', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     *
     * @see \Guidance\Tests\Base\Actor\Helper\LogProvider::getAvailableLogTypes()
     */
    public function tryToGetAvailableLogTypes(): array {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('getAvailableLogTypes', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes getAvailableLogTypes and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Guidance\Tests\Base\Actor\Helper\LogProvider::getAvailableLogTypes()
     */
    public function retryGetAvailableLogTypes() {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('getAvailableLogTypes', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     *
     * @see \Guidance\Tests\Base\Actor\Helper\LogProvider::getClientLog()
     */
    public function getClientLog(): array {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('getClientLog', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     *
     * @see \Guidance\Tests\Base\Actor\Helper\LogProvider::getClientLog()
     */
    public function tryToGetClientLog(): array {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('getClientLog', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes getClientLog and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Guidance\Tests\Base\Actor\Helper\LogProvider::getClientLog()
     */
    public function retryGetClientLog() {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('getClientLog', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     *
     * @see \Guidance\Tests\Base\Actor\Helper\LogProvider::getDriverLog()
     */
    public function getDriverLog(): array {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('getDriverLog', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     *
     * @see \Guidance\Tests\Base\Actor\Helper\LogProvider::getDriverLog()
     */
    public function tryToGetDriverLog(): array {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('getDriverLog', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes getDriverLog and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Guidance\Tests\Base\Actor\Helper\LogProvider::getDriverLog()
     */
    public function retryGetDriverLog() {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('getDriverLog', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     *
     * @see \Guidance\Tests\Base\Actor\Helper\LogProvider::getBrowserLog()
     */
    public function getBrowserLog(): array {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('getBrowserLog', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     *
     * @see \Guidance\Tests\Base\Actor\Helper\LogProvider::getBrowserLog()
     */
    public function tryToGetBrowserLog(): array {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('getBrowserLog', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes getBrowserLog and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Guidance\Tests\Base\Actor\Helper\LogProvider::getBrowserLog()
     */
    public function retryGetBrowserLog() {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('getBrowserLog', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     *
     * @see \Guidance\Tests\Base\Actor\Helper\LogProvider::getServerLog()
     */
    public function getServerLog(): array {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('getServerLog', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     *
     * @see \Guidance\Tests\Base\Actor\Helper\LogProvider::getServerLog()
     */
    public function tryToGetServerLog(): array {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('getServerLog', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes getServerLog and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Guidance\Tests\Base\Actor\Helper\LogProvider::getServerLog()
     */
    public function retryGetServerLog() {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('getServerLog', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     *
     * @see \Guidance\Tests\Base\Actor\Helper\LogProvider::isErrorOccur()
     */
    public function isErrorOccur($logs): bool {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('isErrorOccur', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     *
     * @see \Guidance\Tests\Base\Actor\Helper\LogProvider::isErrorOccur()
     */
    public function tryToIsErrorOccur($logs): bool {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('isErrorOccur', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes isErrorOccur and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Guidance\Tests\Base\Actor\Helper\LogProvider::isErrorOccur()
     */
    public function retryIsErrorOccur($logs) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('isErrorOccur', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     *
     * @see \Guidance\Tests\Base\Actor\Helper\LogProvider::isWarningOccur()
     */
    public function isWarningOccur($logs): bool {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('isWarningOccur', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     *
     * @see \Guidance\Tests\Base\Actor\Helper\LogProvider::isWarningOccur()
     */
    public function tryToIsWarningOccur($logs): bool {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('isWarningOccur', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes isWarningOccur and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Guidance\Tests\Base\Actor\Helper\LogProvider::isWarningOccur()
     */
    public function retryIsWarningOccur($logs) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('isWarningOccur', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     *
     * @see \Guidance\Tests\Base\Actor\Helper\LogProvider::isInfoMessageOccur()
     */
    public function isInfoMessageOccur($logs): bool {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('isInfoMessageOccur', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     *
     * @see \Guidance\Tests\Base\Actor\Helper\LogProvider::isInfoMessageOccur()
     */
    public function tryToIsInfoMessageOccur($logs): bool {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('isInfoMessageOccur', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes isInfoMessageOccur and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Guidance\Tests\Base\Actor\Helper\LogProvider::isInfoMessageOccur()
     */
    public function retryIsInfoMessageOccur($logs) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('isInfoMessageOccur', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     *
     * @see \Guidance\Tests\Base\Actor\Helper\LogProvider::getErrorMessages()
     */
    public function getErrorMessages($logs): array {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('getErrorMessages', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     *
     * @see \Guidance\Tests\Base\Actor\Helper\LogProvider::getErrorMessages()
     */
    public function tryToGetErrorMessages($logs): array {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('getErrorMessages', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes getErrorMessages and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Guidance\Tests\Base\Actor\Helper\LogProvider::getErrorMessages()
     */
    public function retryGetErrorMessages($logs) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('getErrorMessages', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     *
     * @see \Guidance\Tests\Base\Actor\Helper\LogProvider::getWarningMessages()
     */
    public function getWarningMessages($logs): array {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('getWarningMessages', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     *
     * @see \Guidance\Tests\Base\Actor\Helper\LogProvider::getWarningMessages()
     */
    public function tryToGetWarningMessages($logs): array {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('getWarningMessages', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes getWarningMessages and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Guidance\Tests\Base\Actor\Helper\LogProvider::getWarningMessages()
     */
    public function retryGetWarningMessages($logs) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('getWarningMessages', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     *
     * @see \Guidance\Tests\Base\Actor\Helper\LogProvider::getInfoMessages()
     */
    public function getInfoMessages($logs): array {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('getInfoMessages', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     *
     * @see \Guidance\Tests\Base\Actor\Helper\LogProvider::getInfoMessages()
     */
    public function tryToGetInfoMessages($logs): array {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('getInfoMessages', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes getInfoMessages and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Guidance\Tests\Base\Actor\Helper\LogProvider::getInfoMessages()
     */
    public function retryGetInfoMessages($logs) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('getInfoMessages', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     *
     * @see \Guidance\Tests\Project\Actor\Helper\Common::waitForNoActiveAjax()
     */
    public function waitForNoActiveAjax($timeout = null, $callback = null): void {
        $this->getScenario()->runStep(new \Codeception\Step\Action('waitForNoActiveAjax', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Enters a directory In local filesystem.
     * Project root directory is used by default
     *
     * @param string $path
     * @see \Codeception\Module\Filesystem::amInPath()
     */
    public function amInPath($path) {
        return $this->getScenario()->runStep(new \Codeception\Step\Condition('amInPath', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Opens a file and stores it's content.
     *
     * Usage:
     *
     * ``` php
     * <?php
     * $I->openFile('composer.json');
     * $I->seeInThisFile('codeception/codeception');
     * ?>
     * ```
     *
     * @param string $filename
     * @see \Codeception\Module\Filesystem::openFile()
     */
    public function openFile($filename) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('openFile', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Opens a file and stores it's content.
     *
     * Usage:
     *
     * ``` php
     * <?php
     * $I->openFile('composer.json');
     * $I->seeInThisFile('codeception/codeception');
     * ?>
     * ```
     *
     * @param string $filename
     * @see \Codeception\Module\Filesystem::openFile()
     */
    public function tryToOpenFile($filename) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('openFile', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes openFile and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\Filesystem::openFile()
     */
    public function retryOpenFile($filename) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('openFile', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Deletes a file
     *
     * ``` php
     * <?php
     * $I->deleteFile('composer.lock');
     * ?>
     * ```
     *
     * @param string $filename
     * @see \Codeception\Module\Filesystem::deleteFile()
     */
    public function deleteFile($filename) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('deleteFile', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Deletes a file
     *
     * ``` php
     * <?php
     * $I->deleteFile('composer.lock');
     * ?>
     * ```
     *
     * @param string $filename
     * @see \Codeception\Module\Filesystem::deleteFile()
     */
    public function tryToDeleteFile($filename) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('deleteFile', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes deleteFile and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\Filesystem::deleteFile()
     */
    public function retryDeleteFile($filename) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('deleteFile', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Deletes directory with all subdirectories
     *
     * ``` php
     * <?php
     * $I->deleteDir('vendor');
     * ?>
     * ```
     *
     * @param string $dirname
     * @see \Codeception\Module\Filesystem::deleteDir()
     */
    public function deleteDir($dirname) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('deleteDir', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Deletes directory with all subdirectories
     *
     * ``` php
     * <?php
     * $I->deleteDir('vendor');
     * ?>
     * ```
     *
     * @param string $dirname
     * @see \Codeception\Module\Filesystem::deleteDir()
     */
    public function tryToDeleteDir($dirname) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('deleteDir', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes deleteDir and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\Filesystem::deleteDir()
     */
    public function retryDeleteDir($dirname) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('deleteDir', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Copies directory with all contents
     *
     * ``` php
     * <?php
     * $I->copyDir('vendor','old_vendor');
     * ?>
     * ```
     *
     * @param string $src
     * @param string $dst
     * @see \Codeception\Module\Filesystem::copyDir()
     */
    public function copyDir($src, $dst) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('copyDir', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Copies directory with all contents
     *
     * ``` php
     * <?php
     * $I->copyDir('vendor','old_vendor');
     * ?>
     * ```
     *
     * @param string $src
     * @param string $dst
     * @see \Codeception\Module\Filesystem::copyDir()
     */
    public function tryToCopyDir($src, $dst) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('copyDir', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes copyDir and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\Filesystem::copyDir()
     */
    public function retryCopyDir($src, $dst) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('copyDir', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks If opened file has `text` in it.
     *
     * Usage:
     *
     * ``` php
     * <?php
     * $I->openFile('composer.json');
     * $I->seeInThisFile('codeception/codeception');
     * ?>
     * ```
     *
     * @param string $text
     * @see \Codeception\Module\Filesystem::seeInThisFile()
     */
    public function seeInThisFile($text) {
        return $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeInThisFile', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Checks If opened file has `text` in it.
     *
     * Usage:
     *
     * ``` php
     * <?php
     * $I->openFile('composer.json');
     * $I->seeInThisFile('codeception/codeception');
     * ?>
     * ```
     *
     * @param string $text
     * @see \Codeception\Module\Filesystem::seeInThisFile()
     */
    public function tryToSeeInThisFile($text) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('seeInThisFile', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes seeInThisFile and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\Filesystem::seeInThisFile()
     */
    public function retrySeeInThisFile($text) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('seeInThisFile', func_get_args(), $retryNum, $retryInterval));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks If opened file has `text` in it.
     *
     * Usage:
     *
     * ``` php
     * <?php
     * $I->openFile('composer.json');
     * $I->seeInThisFile('codeception/codeception');
     * ?>
     * ```
     *
     * @param string $text
     * @see \Codeception\Module\Filesystem::seeInThisFile()
     */
    public function canSeeInThisFile($text) {
        return $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeInThisFile', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks If opened file has the `number` of new lines.
     *
     * Usage:
     *
     * ``` php
     * <?php
     * $I->openFile('composer.json');
     * $I->seeNumberNewLines(5);
     * ?>
     * ```
     *
     * @param int $number New lines
     * @see \Codeception\Module\Filesystem::seeNumberNewLines()
     */
    public function seeNumberNewLines($number) {
        return $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeNumberNewLines', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Checks If opened file has the `number` of new lines.
     *
     * Usage:
     *
     * ``` php
     * <?php
     * $I->openFile('composer.json');
     * $I->seeNumberNewLines(5);
     * ?>
     * ```
     *
     * @param int $number New lines
     * @see \Codeception\Module\Filesystem::seeNumberNewLines()
     */
    public function tryToSeeNumberNewLines($number) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('seeNumberNewLines', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes seeNumberNewLines and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\Filesystem::seeNumberNewLines()
     */
    public function retrySeeNumberNewLines($number) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('seeNumberNewLines', func_get_args(), $retryNum, $retryInterval));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks If opened file has the `number` of new lines.
     *
     * Usage:
     *
     * ``` php
     * <?php
     * $I->openFile('composer.json');
     * $I->seeNumberNewLines(5);
     * ?>
     * ```
     *
     * @param int $number New lines
     * @see \Codeception\Module\Filesystem::seeNumberNewLines()
     */
    public function canSeeNumberNewLines($number) {
        return $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeNumberNewLines', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that contents of currently opened file matches $regex
     *
     * @param string $regex
     * @see \Codeception\Module\Filesystem::seeThisFileMatches()
     */
    public function seeThisFileMatches($regex) {
        return $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeThisFileMatches', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Checks that contents of currently opened file matches $regex
     *
     * @param string $regex
     * @see \Codeception\Module\Filesystem::seeThisFileMatches()
     */
    public function tryToSeeThisFileMatches($regex) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('seeThisFileMatches', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes seeThisFileMatches and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\Filesystem::seeThisFileMatches()
     */
    public function retrySeeThisFileMatches($regex) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('seeThisFileMatches', func_get_args(), $retryNum, $retryInterval));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks that contents of currently opened file matches $regex
     *
     * @param string $regex
     * @see \Codeception\Module\Filesystem::seeThisFileMatches()
     */
    public function canSeeThisFileMatches($regex) {
        return $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeThisFileMatches', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks the strict matching of file contents.
     * Unlike `seeInThisFile` will fail if file has something more than expected lines.
     * Better to use with HEREDOC strings.
     * Matching is done after removing "\r" chars from file content.
     *
     * ``` php
     * <?php
     * $I->openFile('process.pid');
     * $I->seeFileContentsEqual('3192');
     * ?>
     * ```
     *
     * @param string $text
     * @see \Codeception\Module\Filesystem::seeFileContentsEqual()
     */
    public function seeFileContentsEqual($text) {
        return $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeFileContentsEqual', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Checks the strict matching of file contents.
     * Unlike `seeInThisFile` will fail if file has something more than expected lines.
     * Better to use with HEREDOC strings.
     * Matching is done after removing "\r" chars from file content.
     *
     * ``` php
     * <?php
     * $I->openFile('process.pid');
     * $I->seeFileContentsEqual('3192');
     * ?>
     * ```
     *
     * @param string $text
     * @see \Codeception\Module\Filesystem::seeFileContentsEqual()
     */
    public function tryToSeeFileContentsEqual($text) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('seeFileContentsEqual', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes seeFileContentsEqual and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\Filesystem::seeFileContentsEqual()
     */
    public function retrySeeFileContentsEqual($text) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('seeFileContentsEqual', func_get_args(), $retryNum, $retryInterval));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks the strict matching of file contents.
     * Unlike `seeInThisFile` will fail if file has something more than expected lines.
     * Better to use with HEREDOC strings.
     * Matching is done after removing "\r" chars from file content.
     *
     * ``` php
     * <?php
     * $I->openFile('process.pid');
     * $I->seeFileContentsEqual('3192');
     * ?>
     * ```
     *
     * @param string $text
     * @see \Codeception\Module\Filesystem::seeFileContentsEqual()
     */
    public function canSeeFileContentsEqual($text) {
        return $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeFileContentsEqual', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks If opened file doesn't contain `text` in it
     *
     * ``` php
     * <?php
     * $I->openFile('composer.json');
     * $I->dontSeeInThisFile('codeception/codeception');
     * ?>
     * ```
     *
     * @param string $text
     * @see \Codeception\Module\Filesystem::dontSeeInThisFile()
     */
    public function dontSeeInThisFile($text) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('dontSeeInThisFile', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Checks If opened file doesn't contain `text` in it
     *
     * ``` php
     * <?php
     * $I->openFile('composer.json');
     * $I->dontSeeInThisFile('codeception/codeception');
     * ?>
     * ```
     *
     * @param string $text
     * @see \Codeception\Module\Filesystem::dontSeeInThisFile()
     */
    public function tryToDontSeeInThisFile($text) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('dontSeeInThisFile', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes dontSeeInThisFile and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\Filesystem::dontSeeInThisFile()
     */
    public function retryDontSeeInThisFile($text) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('dontSeeInThisFile', func_get_args(), $retryNum, $retryInterval));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks If opened file doesn't contain `text` in it
     *
     * ``` php
     * <?php
     * $I->openFile('composer.json');
     * $I->dontSeeInThisFile('codeception/codeception');
     * ?>
     * ```
     *
     * @param string $text
     * @see \Codeception\Module\Filesystem::dontSeeInThisFile()
     */
    public function cantSeeInThisFile($text) {
        return $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('dontSeeInThisFile', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Deletes a file
     * @see \Codeception\Module\Filesystem::deleteThisFile()
     */
    public function deleteThisFile() {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('deleteThisFile', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Deletes a file
     * @see \Codeception\Module\Filesystem::deleteThisFile()
     */
    public function tryToDeleteThisFile() {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('deleteThisFile', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes deleteThisFile and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\Filesystem::deleteThisFile()
     */
    public function retryDeleteThisFile() {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('deleteThisFile', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks if file exists in path.
     * Opens a file when it's exists
     *
     * ``` php
     * <?php
     * $I->seeFileFound('UserModel.php','app/models');
     * ?>
     * ```
     *
     * @param string $filename
     * @param string $path
     * @see \Codeception\Module\Filesystem::seeFileFound()
     */
    public function seeFileFound($filename, $path = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeFileFound', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Checks if file exists in path.
     * Opens a file when it's exists
     *
     * ``` php
     * <?php
     * $I->seeFileFound('UserModel.php','app/models');
     * ?>
     * ```
     *
     * @param string $filename
     * @param string $path
     * @see \Codeception\Module\Filesystem::seeFileFound()
     */
    public function tryToSeeFileFound($filename, $path = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('seeFileFound', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes seeFileFound and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\Filesystem::seeFileFound()
     */
    public function retrySeeFileFound($filename, $path = null) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('seeFileFound', func_get_args(), $retryNum, $retryInterval));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks if file exists in path.
     * Opens a file when it's exists
     *
     * ``` php
     * <?php
     * $I->seeFileFound('UserModel.php','app/models');
     * ?>
     * ```
     *
     * @param string $filename
     * @param string $path
     * @see \Codeception\Module\Filesystem::seeFileFound()
     */
    public function canSeeFileFound($filename, $path = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeFileFound', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks if file does not exist in path
     *
     * @param string $filename
     * @param string $path
     * @see \Codeception\Module\Filesystem::dontSeeFileFound()
     */
    public function dontSeeFileFound($filename, $path = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('dontSeeFileFound', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Checks if file does not exist in path
     *
     * @param string $filename
     * @param string $path
     * @see \Codeception\Module\Filesystem::dontSeeFileFound()
     */
    public function tryToDontSeeFileFound($filename, $path = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('dontSeeFileFound', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes dontSeeFileFound and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\Filesystem::dontSeeFileFound()
     */
    public function retryDontSeeFileFound($filename, $path = null) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('dontSeeFileFound', func_get_args(), $retryNum, $retryInterval));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks if file does not exist in path
     *
     * @param string $filename
     * @param string $path
     * @see \Codeception\Module\Filesystem::dontSeeFileFound()
     */
    public function cantSeeFileFound($filename, $path = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('dontSeeFileFound', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Erases directory contents
     *
     * ``` php
     * <?php
     * $I->cleanDir('logs');
     * ?>
     * ```
     *
     * @param string $dirname
     * @see \Codeception\Module\Filesystem::cleanDir()
     */
    public function cleanDir($dirname) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('cleanDir', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Erases directory contents
     *
     * ``` php
     * <?php
     * $I->cleanDir('logs');
     * ?>
     * ```
     *
     * @param string $dirname
     * @see \Codeception\Module\Filesystem::cleanDir()
     */
    public function tryToCleanDir($dirname) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('cleanDir', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes cleanDir and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\Filesystem::cleanDir()
     */
    public function retryCleanDir($dirname) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('cleanDir', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Saves contents to file
     *
     * @param string $filename
     * @param string $contents
     * @see \Codeception\Module\Filesystem::writeToFile()
     */
    public function writeToFile($filename, $contents) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('writeToFile', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Saves contents to file
     *
     * @param string $filename
     * @param string $contents
     * @see \Codeception\Module\Filesystem::writeToFile()
     */
    public function tryToWriteToFile($filename, $contents) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('writeToFile', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes writeToFile and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\Filesystem::writeToFile()
     */
    public function retryWriteToFile($filename, $contents) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('writeToFile', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Handles and checks exception called inside callback function.
     * Either exception class name or exception instance should be provided.
     *
     * ```php
     * <?php
     * $I->expectException(MyException::class, function() {
     *     $this->doSomethingBad();
     * });
     *
     * $I->expectException(new MyException(), function() {
     *     $this->doSomethingBad();
     * });
     * ```
     * If you want to check message or exception code, you can pass them with exception instance:
     * ```php
     * <?php
     * // will check that exception MyException is thrown with "Don't do bad things" message
     * $I->expectException(new MyException("Don't do bad things"), function() {
     *     $this->doSomethingBad();
     * });
     * ```
     *
     * @deprecated Use expectThrowable() instead
     * @param Exception|string $exception
     * @param callable $callback
     * @see \Codeception\Module\Asserts::expectException()
     */
    public function expectException($exception, $callback) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('expectException', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Handles and checks exception called inside callback function.
     * Either exception class name or exception instance should be provided.
     *
     * ```php
     * <?php
     * $I->expectException(MyException::class, function() {
     *     $this->doSomethingBad();
     * });
     *
     * $I->expectException(new MyException(), function() {
     *     $this->doSomethingBad();
     * });
     * ```
     * If you want to check message or exception code, you can pass them with exception instance:
     * ```php
     * <?php
     * // will check that exception MyException is thrown with "Don't do bad things" message
     * $I->expectException(new MyException("Don't do bad things"), function() {
     *     $this->doSomethingBad();
     * });
     * ```
     *
     * @deprecated Use expectThrowable() instead
     * @param Exception|string $exception
     * @param callable $callback
     * @see \Codeception\Module\Asserts::expectException()
     */
    public function tryToExpectException($exception, $callback) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('expectException', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes expectException and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\Asserts::expectException()
     */
    public function retryExpectException($exception, $callback) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('expectException', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Handles and checks throwables (Exceptions/Errors) called inside the callback function.
     * Either throwable class name or throwable instance should be provided.
     *
     * ```php
     * <?php
     * $I->expectThrowable(MyThrowable::class, function() {
     *     $this->doSomethingBad();
     * });
     *
     * $I->expectThrowable(new MyException(), function() {
     *     $this->doSomethingBad();
     * });
     * ```
     * If you want to check message or throwable code, you can pass them with throwable instance:
     * ```php
     * <?php
     * // will check that throwable MyError is thrown with "Don't do bad things" message
     * $I->expectThrowable(new MyError("Don't do bad things"), function() {
     *     $this->doSomethingBad();
     * });
     * ```
     *
     * @param Throwable|string $throwable
     * @param callable $callback
     * @see \Codeception\Module\Asserts::expectThrowable()
     */
    public function expectThrowable($throwable, $callback) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('expectThrowable', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Handles and checks throwables (Exceptions/Errors) called inside the callback function.
     * Either throwable class name or throwable instance should be provided.
     *
     * ```php
     * <?php
     * $I->expectThrowable(MyThrowable::class, function() {
     *     $this->doSomethingBad();
     * });
     *
     * $I->expectThrowable(new MyException(), function() {
     *     $this->doSomethingBad();
     * });
     * ```
     * If you want to check message or throwable code, you can pass them with throwable instance:
     * ```php
     * <?php
     * // will check that throwable MyError is thrown with "Don't do bad things" message
     * $I->expectThrowable(new MyError("Don't do bad things"), function() {
     *     $this->doSomethingBad();
     * });
     * ```
     *
     * @param Throwable|string $throwable
     * @param callable $callback
     * @see \Codeception\Module\Asserts::expectThrowable()
     */
    public function tryToExpectThrowable($throwable, $callback) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('expectThrowable', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes expectThrowable and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\Asserts::expectThrowable()
     */
    public function retryExpectThrowable($throwable, $callback) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('expectThrowable', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a file does not exist.
     *
     * @param string $filename
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertFileNotExists()
     */
    public function assertFileNotExists($filename, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertFileNotExists', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that a file does not exist.
     *
     * @param string $filename
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertFileNotExists()
     */
    public function tryToAssertFileNotExists($filename, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertFileNotExists', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertFileNotExists and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertFileNotExists()
     */
    public function retryAssertFileNotExists($filename, $message = null) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertFileNotExists', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a value is greater than or equal to another value.
     *
     * @param $expected
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertGreaterOrEquals()
     */
    public function assertGreaterOrEquals($expected, $actual, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertGreaterOrEquals', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that a value is greater than or equal to another value.
     *
     * @param $expected
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertGreaterOrEquals()
     */
    public function tryToAssertGreaterOrEquals($expected, $actual, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertGreaterOrEquals', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertGreaterOrEquals and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertGreaterOrEquals()
     */
    public function retryAssertGreaterOrEquals($expected, $actual, $message = null) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertGreaterOrEquals', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a variable is empty.
     *
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertIsEmpty()
     */
    public function assertIsEmpty($actual, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertIsEmpty', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that a variable is empty.
     *
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertIsEmpty()
     */
    public function tryToAssertIsEmpty($actual, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertIsEmpty', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertIsEmpty and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertIsEmpty()
     */
    public function retryAssertIsEmpty($actual, $message = null) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertIsEmpty', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a value is smaller than or equal to another value.
     *
     * @param $expected
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertLessOrEquals()
     */
    public function assertLessOrEquals($expected, $actual, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertLessOrEquals', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that a value is smaller than or equal to another value.
     *
     * @param $expected
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertLessOrEquals()
     */
    public function tryToAssertLessOrEquals($expected, $actual, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertLessOrEquals', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertLessOrEquals and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertLessOrEquals()
     */
    public function retryAssertLessOrEquals($expected, $actual, $message = null) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertLessOrEquals', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a string does not match a given regular expression.
     *
     * @param string $pattern
     * @param string $string
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertNotRegExp()
     */
    public function assertNotRegExp($pattern, $string, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertNotRegExp', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that a string does not match a given regular expression.
     *
     * @param string $pattern
     * @param string $string
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertNotRegExp()
     */
    public function tryToAssertNotRegExp($pattern, $string, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertNotRegExp', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertNotRegExp and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertNotRegExp()
     */
    public function retryAssertNotRegExp($pattern, $string, $message = null) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertNotRegExp', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a string matches a given regular expression.
     *
     * @param string $pattern
     * @param string $string
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertRegExp()
     */
    public function assertRegExp($pattern, $string, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertRegExp', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that a string matches a given regular expression.
     *
     * @param string $pattern
     * @param string $string
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertRegExp()
     */
    public function tryToAssertRegExp($pattern, $string, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertRegExp', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertRegExp and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertRegExp()
     */
    public function retryAssertRegExp($pattern, $string, $message = null) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertRegExp', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Evaluates a PHPUnit\Framework\Constraint matcher object.
     *
     * @param $value
     * @param Constraint $constraint
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertThatItsNot()
     */
    public function assertThatItsNot($value, $constraint, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertThatItsNot', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Evaluates a PHPUnit\Framework\Constraint matcher object.
     *
     * @param $value
     * @param Constraint $constraint
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertThatItsNot()
     */
    public function tryToAssertThatItsNot($value, $constraint, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertThatItsNot', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertThatItsNot and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertThatItsNot()
     */
    public function retryAssertThatItsNot($value, $constraint, $message = null) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertThatItsNot', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that an array has a specified key.
     *
     * @param int|string $key
     * @param array|ArrayAccess $array
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertArrayHasKey()
     */
    public function assertArrayHasKey($key, $array, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertArrayHasKey', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that an array has a specified key.
     *
     * @param int|string $key
     * @param array|ArrayAccess $array
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertArrayHasKey()
     */
    public function tryToAssertArrayHasKey($key, $array, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertArrayHasKey', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertArrayHasKey and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertArrayHasKey()
     */
    public function retryAssertArrayHasKey($key, $array, $message = null) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertArrayHasKey', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that an array does not have a specified key.
     *
     * @param int|string $key
     * @param array|ArrayAccess $array
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertArrayNotHasKey()
     */
    public function assertArrayNotHasKey($key, $array, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertArrayNotHasKey', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that an array does not have a specified key.
     *
     * @param int|string $key
     * @param array|ArrayAccess $array
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertArrayNotHasKey()
     */
    public function tryToAssertArrayNotHasKey($key, $array, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertArrayNotHasKey', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertArrayNotHasKey and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertArrayNotHasKey()
     */
    public function retryAssertArrayNotHasKey($key, $array, $message = null) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertArrayNotHasKey', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a class has a specified attribute.
     *
     * @param string $attributeName
     * @param string $className
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertClassHasAttribute()
     */
    public function assertClassHasAttribute($attributeName, $className, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertClassHasAttribute', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that a class has a specified attribute.
     *
     * @param string $attributeName
     * @param string $className
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertClassHasAttribute()
     */
    public function tryToAssertClassHasAttribute($attributeName, $className, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertClassHasAttribute', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertClassHasAttribute and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertClassHasAttribute()
     */
    public function retryAssertClassHasAttribute($attributeName, $className, $message = null) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertClassHasAttribute', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a class has a specified static attribute.
     *
     * @param string $attributeName
     * @param string $className
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertClassHasStaticAttribute()
     */
    public function assertClassHasStaticAttribute($attributeName, $className, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertClassHasStaticAttribute', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that a class has a specified static attribute.
     *
     * @param string $attributeName
     * @param string $className
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertClassHasStaticAttribute()
     */
    public function tryToAssertClassHasStaticAttribute($attributeName, $className, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertClassHasStaticAttribute', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertClassHasStaticAttribute and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertClassHasStaticAttribute()
     */
    public function retryAssertClassHasStaticAttribute($attributeName, $className, $message = null) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertClassHasStaticAttribute', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a class does not have a specified attribute.
     *
     * @param string $attributeName
     * @param string $className
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertClassNotHasAttribute()
     */
    public function assertClassNotHasAttribute($attributeName, $className, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertClassNotHasAttribute', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that a class does not have a specified attribute.
     *
     * @param string $attributeName
     * @param string $className
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertClassNotHasAttribute()
     */
    public function tryToAssertClassNotHasAttribute($attributeName, $className, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertClassNotHasAttribute', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertClassNotHasAttribute and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertClassNotHasAttribute()
     */
    public function retryAssertClassNotHasAttribute($attributeName, $className, $message = null) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertClassNotHasAttribute', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a class does not have a specified static attribute.
     *
     * @param string $attributeName
     * @param string $className
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertClassNotHasStaticAttribute()
     */
    public function assertClassNotHasStaticAttribute($attributeName, $className, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertClassNotHasStaticAttribute', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that a class does not have a specified static attribute.
     *
     * @param string $attributeName
     * @param string $className
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertClassNotHasStaticAttribute()
     */
    public function tryToAssertClassNotHasStaticAttribute($attributeName, $className, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertClassNotHasStaticAttribute', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertClassNotHasStaticAttribute and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertClassNotHasStaticAttribute()
     */
    public function retryAssertClassNotHasStaticAttribute($attributeName, $className, $message = null) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertClassNotHasStaticAttribute', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a haystack contains a needle.
     *
     * @param $needle
     * @param $haystack
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertContains()
     */
    public function assertContains($needle, $haystack, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertContains', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that a haystack contains a needle.
     *
     * @param $needle
     * @param $haystack
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertContains()
     */
    public function tryToAssertContains($needle, $haystack, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertContains', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertContains and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertContains()
     */
    public function retryAssertContains($needle, $haystack, $message = null) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertContains', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param $needle
     * @param $haystack
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertContainsEquals()
     */
    public function assertContainsEquals($needle, $haystack, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertContainsEquals', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * @param $needle
     * @param $haystack
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertContainsEquals()
     */
    public function tryToAssertContainsEquals($needle, $haystack, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertContainsEquals', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertContainsEquals and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertContainsEquals()
     */
    public function retryAssertContainsEquals($needle, $haystack, $message = null) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertContainsEquals', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a haystack contains only values of a given type.
     *
     * @param string $type
     * @param $haystack
     * @param bool|null $isNativeType
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertContainsOnly()
     */
    public function assertContainsOnly($type, $haystack, $isNativeType = null, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertContainsOnly', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that a haystack contains only values of a given type.
     *
     * @param string $type
     * @param $haystack
     * @param bool|null $isNativeType
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertContainsOnly()
     */
    public function tryToAssertContainsOnly($type, $haystack, $isNativeType = null, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertContainsOnly', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertContainsOnly and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertContainsOnly()
     */
    public function retryAssertContainsOnly($type, $haystack, $isNativeType = null, $message = null) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertContainsOnly', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a haystack contains only instances of a given class name.
     *
     * @param string $className
     * @param $haystack
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertContainsOnlyInstancesOf()
     */
    public function assertContainsOnlyInstancesOf($className, $haystack, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertContainsOnlyInstancesOf', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that a haystack contains only instances of a given class name.
     *
     * @param string $className
     * @param $haystack
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertContainsOnlyInstancesOf()
     */
    public function tryToAssertContainsOnlyInstancesOf($className, $haystack, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertContainsOnlyInstancesOf', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertContainsOnlyInstancesOf and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertContainsOnlyInstancesOf()
     */
    public function retryAssertContainsOnlyInstancesOf($className, $haystack, $message = null) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertContainsOnlyInstancesOf', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts the number of elements of an array, Countable or Traversable.
     *
     * @param int $expectedCount
     * @param Countable|iterable $haystack
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertCount()
     */
    public function assertCount($expectedCount, $haystack, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertCount', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts the number of elements of an array, Countable or Traversable.
     *
     * @param int $expectedCount
     * @param Countable|iterable $haystack
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertCount()
     */
    public function tryToAssertCount($expectedCount, $haystack, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertCount', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertCount and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertCount()
     */
    public function retryAssertCount($expectedCount, $haystack, $message = null) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertCount', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a directory does not exist.
     *
     * @param string $directory
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertDirectoryDoesNotExist()
     */
    public function assertDirectoryDoesNotExist($directory, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertDirectoryDoesNotExist', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that a directory does not exist.
     *
     * @param string $directory
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertDirectoryDoesNotExist()
     */
    public function tryToAssertDirectoryDoesNotExist($directory, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertDirectoryDoesNotExist', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertDirectoryDoesNotExist and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertDirectoryDoesNotExist()
     */
    public function retryAssertDirectoryDoesNotExist($directory, $message = null) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertDirectoryDoesNotExist', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a directory exists.
     *
     * @param string $directory
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertDirectoryExists()
     */
    public function assertDirectoryExists($directory, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertDirectoryExists', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that a directory exists.
     *
     * @param string $directory
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertDirectoryExists()
     */
    public function tryToAssertDirectoryExists($directory, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertDirectoryExists', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertDirectoryExists and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertDirectoryExists()
     */
    public function retryAssertDirectoryExists($directory, $message = null) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertDirectoryExists', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a directory exists and is not readable.
     *
     * @param string $directory
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertDirectoryIsNotReadable()
     */
    public function assertDirectoryIsNotReadable($directory, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertDirectoryIsNotReadable', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that a directory exists and is not readable.
     *
     * @param string $directory
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertDirectoryIsNotReadable()
     */
    public function tryToAssertDirectoryIsNotReadable($directory, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertDirectoryIsNotReadable', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertDirectoryIsNotReadable and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertDirectoryIsNotReadable()
     */
    public function retryAssertDirectoryIsNotReadable($directory, $message = null) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertDirectoryIsNotReadable', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a directory exists and is not writable.
     *
     * @param string $directory
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertDirectoryIsNotWritable()
     */
    public function assertDirectoryIsNotWritable($directory, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertDirectoryIsNotWritable', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that a directory exists and is not writable.
     *
     * @param string $directory
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertDirectoryIsNotWritable()
     */
    public function tryToAssertDirectoryIsNotWritable($directory, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertDirectoryIsNotWritable', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertDirectoryIsNotWritable and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertDirectoryIsNotWritable()
     */
    public function retryAssertDirectoryIsNotWritable($directory, $message = null) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertDirectoryIsNotWritable', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a directory exists and is readable.
     *
     * @param string $directory
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertDirectoryIsReadable()
     */
    public function assertDirectoryIsReadable($directory, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertDirectoryIsReadable', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that a directory exists and is readable.
     *
     * @param string $directory
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertDirectoryIsReadable()
     */
    public function tryToAssertDirectoryIsReadable($directory, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertDirectoryIsReadable', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertDirectoryIsReadable and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertDirectoryIsReadable()
     */
    public function retryAssertDirectoryIsReadable($directory, $message = null) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertDirectoryIsReadable', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a directory exists and is writable.
     *
     * @param string $directory
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertDirectoryIsWritable()
     */
    public function assertDirectoryIsWritable($directory, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertDirectoryIsWritable', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that a directory exists and is writable.
     *
     * @param string $directory
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertDirectoryIsWritable()
     */
    public function tryToAssertDirectoryIsWritable($directory, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertDirectoryIsWritable', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertDirectoryIsWritable and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertDirectoryIsWritable()
     */
    public function retryAssertDirectoryIsWritable($directory, $message = null) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertDirectoryIsWritable', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a string does not match a given regular expression.
     *
     * @param string $pattern
     * @param string $string
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertDoesNotMatchRegularExpression()
     */
    public function assertDoesNotMatchRegularExpression($pattern, $string, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertDoesNotMatchRegularExpression', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that a string does not match a given regular expression.
     *
     * @param string $pattern
     * @param string $string
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertDoesNotMatchRegularExpression()
     */
    public function tryToAssertDoesNotMatchRegularExpression($pattern, $string, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertDoesNotMatchRegularExpression', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertDoesNotMatchRegularExpression and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertDoesNotMatchRegularExpression()
     */
    public function retryAssertDoesNotMatchRegularExpression($pattern, $string, $message = null) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertDoesNotMatchRegularExpression', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a variable is empty.
     *
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertEmpty()
     */
    public function assertEmpty($actual, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertEmpty', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that a variable is empty.
     *
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertEmpty()
     */
    public function tryToAssertEmpty($actual, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertEmpty', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertEmpty and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertEmpty()
     */
    public function retryAssertEmpty($actual, $message = null) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertEmpty', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that two variables are equal.
     *
     * @param $expected
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertEquals()
     */
    public function assertEquals($expected, $actual, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertEquals', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that two variables are equal.
     *
     * @param $expected
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertEquals()
     */
    public function tryToAssertEquals($expected, $actual, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertEquals', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertEquals and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertEquals()
     */
    public function retryAssertEquals($expected, $actual, $message = null) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertEquals', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that two variables are equal (canonicalizing).
     *
     * @param $expected
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertEqualsCanonicalizing()
     */
    public function assertEqualsCanonicalizing($expected, $actual, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertEqualsCanonicalizing', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that two variables are equal (canonicalizing).
     *
     * @param $expected
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertEqualsCanonicalizing()
     */
    public function tryToAssertEqualsCanonicalizing($expected, $actual, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertEqualsCanonicalizing', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertEqualsCanonicalizing and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertEqualsCanonicalizing()
     */
    public function retryAssertEqualsCanonicalizing($expected, $actual, $message = null) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertEqualsCanonicalizing', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that two variables are equal (ignoring case).
     *
     * @param $expected
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertEqualsIgnoringCase()
     */
    public function assertEqualsIgnoringCase($expected, $actual, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertEqualsIgnoringCase', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that two variables are equal (ignoring case).
     *
     * @param $expected
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertEqualsIgnoringCase()
     */
    public function tryToAssertEqualsIgnoringCase($expected, $actual, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertEqualsIgnoringCase', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertEqualsIgnoringCase and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertEqualsIgnoringCase()
     */
    public function retryAssertEqualsIgnoringCase($expected, $actual, $message = null) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertEqualsIgnoringCase', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that two variables are equal (with delta).
     *
     * @param $expected
     * @param $actual
     * @param float $delta
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertEqualsWithDelta()
     */
    public function assertEqualsWithDelta($expected, $actual, $delta, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertEqualsWithDelta', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that two variables are equal (with delta).
     *
     * @param $expected
     * @param $actual
     * @param float $delta
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertEqualsWithDelta()
     */
    public function tryToAssertEqualsWithDelta($expected, $actual, $delta, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertEqualsWithDelta', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertEqualsWithDelta and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertEqualsWithDelta()
     */
    public function retryAssertEqualsWithDelta($expected, $actual, $delta, $message = null) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertEqualsWithDelta', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a condition is false.
     *
     * @param $condition
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertFalse()
     */
    public function assertFalse($condition, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertFalse', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that a condition is false.
     *
     * @param $condition
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertFalse()
     */
    public function tryToAssertFalse($condition, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertFalse', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertFalse and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertFalse()
     */
    public function retryAssertFalse($condition, $message = null) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertFalse', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a file does not exist.
     *
     * @param string $filename
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertFileDoesNotExist()
     */
    public function assertFileDoesNotExist($filename, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertFileDoesNotExist', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that a file does not exist.
     *
     * @param string $filename
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertFileDoesNotExist()
     */
    public function tryToAssertFileDoesNotExist($filename, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertFileDoesNotExist', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertFileDoesNotExist and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertFileDoesNotExist()
     */
    public function retryAssertFileDoesNotExist($filename, $message = null) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertFileDoesNotExist', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that the contents of one file is equal to the contents of another file.
     *
     * @param string $expected
     * @param string $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertFileEquals()
     */
    public function assertFileEquals($expected, $actual, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertFileEquals', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that the contents of one file is equal to the contents of another file.
     *
     * @param string $expected
     * @param string $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertFileEquals()
     */
    public function tryToAssertFileEquals($expected, $actual, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertFileEquals', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertFileEquals and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertFileEquals()
     */
    public function retryAssertFileEquals($expected, $actual, $message = null) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertFileEquals', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that the contents of one file is equal to the contents of another file (canonicalizing).
     *
     * @param $expected
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertFileEqualsCanonicalizing()
     */
    public function assertFileEqualsCanonicalizing($expected, $actual, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertFileEqualsCanonicalizing', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that the contents of one file is equal to the contents of another file (canonicalizing).
     *
     * @param $expected
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertFileEqualsCanonicalizing()
     */
    public function tryToAssertFileEqualsCanonicalizing($expected, $actual, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertFileEqualsCanonicalizing', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertFileEqualsCanonicalizing and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertFileEqualsCanonicalizing()
     */
    public function retryAssertFileEqualsCanonicalizing($expected, $actual, $message = null) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertFileEqualsCanonicalizing', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that the contents of one file is equal to the contents of another file (ignoring case).
     *
     * @param $expected
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertFileEqualsIgnoringCase()
     */
    public function assertFileEqualsIgnoringCase($expected, $actual, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertFileEqualsIgnoringCase', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that the contents of one file is equal to the contents of another file (ignoring case).
     *
     * @param $expected
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertFileEqualsIgnoringCase()
     */
    public function tryToAssertFileEqualsIgnoringCase($expected, $actual, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertFileEqualsIgnoringCase', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertFileEqualsIgnoringCase and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertFileEqualsIgnoringCase()
     */
    public function retryAssertFileEqualsIgnoringCase($expected, $actual, $message = null) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertFileEqualsIgnoringCase', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a file exists.
     *
     * @param string $filename
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertFileExists()
     */
    public function assertFileExists($filename, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertFileExists', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that a file exists.
     *
     * @param string $filename
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertFileExists()
     */
    public function tryToAssertFileExists($filename, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertFileExists', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertFileExists and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertFileExists()
     */
    public function retryAssertFileExists($filename, $message = null) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertFileExists', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a file exists and is not readable.
     *
     * @param string $file
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertFileIsNotReadable()
     */
    public function assertFileIsNotReadable($file, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertFileIsNotReadable', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that a file exists and is not readable.
     *
     * @param string $file
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertFileIsNotReadable()
     */
    public function tryToAssertFileIsNotReadable($file, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertFileIsNotReadable', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertFileIsNotReadable and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertFileIsNotReadable()
     */
    public function retryAssertFileIsNotReadable($file, $message = null) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertFileIsNotReadable', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a file exists and is not writable.
     *
     * @param string $file
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertFileIsNotWritable()
     */
    public function assertFileIsNotWritable($file, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertFileIsNotWritable', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that a file exists and is not writable.
     *
     * @param string $file
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertFileIsNotWritable()
     */
    public function tryToAssertFileIsNotWritable($file, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertFileIsNotWritable', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertFileIsNotWritable and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertFileIsNotWritable()
     */
    public function retryAssertFileIsNotWritable($file, $message = null) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertFileIsNotWritable', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a file exists and is readable.
     *
     * @param string $file
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertFileIsReadable()
     */
    public function assertFileIsReadable($file, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertFileIsReadable', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that a file exists and is readable.
     *
     * @param string $file
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertFileIsReadable()
     */
    public function tryToAssertFileIsReadable($file, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertFileIsReadable', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertFileIsReadable and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertFileIsReadable()
     */
    public function retryAssertFileIsReadable($file, $message = null) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertFileIsReadable', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a file exists and is writable.
     *
     * @param string $file
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertFileIsWritable()
     */
    public function assertFileIsWritable($file, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertFileIsWritable', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that a file exists and is writable.
     *
     * @param string $file
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertFileIsWritable()
     */
    public function tryToAssertFileIsWritable($file, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertFileIsWritable', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertFileIsWritable and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertFileIsWritable()
     */
    public function retryAssertFileIsWritable($file, $message = null) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertFileIsWritable', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that the contents of one file is not equal to the contents of another file.
     *
     * @param $expected
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertFileNotEquals()
     */
    public function assertFileNotEquals($expected, $actual, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertFileNotEquals', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that the contents of one file is not equal to the contents of another file.
     *
     * @param $expected
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertFileNotEquals()
     */
    public function tryToAssertFileNotEquals($expected, $actual, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertFileNotEquals', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertFileNotEquals and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertFileNotEquals()
     */
    public function retryAssertFileNotEquals($expected, $actual, $message = null) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertFileNotEquals', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that the contents of one file is not equal to the contents of another file (canonicalizing).
     *
     * @param $expected
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertFileNotEqualsCanonicalizing()
     */
    public function assertFileNotEqualsCanonicalizing($expected, $actual, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertFileNotEqualsCanonicalizing', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that the contents of one file is not equal to the contents of another file (canonicalizing).
     *
     * @param $expected
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertFileNotEqualsCanonicalizing()
     */
    public function tryToAssertFileNotEqualsCanonicalizing($expected, $actual, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertFileNotEqualsCanonicalizing', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertFileNotEqualsCanonicalizing and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertFileNotEqualsCanonicalizing()
     */
    public function retryAssertFileNotEqualsCanonicalizing($expected, $actual, $message = null) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertFileNotEqualsCanonicalizing', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that the contents of one file is not equal to the contents of another file (ignoring case).
     *
     * @param $expected
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertFileNotEqualsIgnoringCase()
     */
    public function assertFileNotEqualsIgnoringCase($expected, $actual, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertFileNotEqualsIgnoringCase', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that the contents of one file is not equal to the contents of another file (ignoring case).
     *
     * @param $expected
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertFileNotEqualsIgnoringCase()
     */
    public function tryToAssertFileNotEqualsIgnoringCase($expected, $actual, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertFileNotEqualsIgnoringCase', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertFileNotEqualsIgnoringCase and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertFileNotEqualsIgnoringCase()
     */
    public function retryAssertFileNotEqualsIgnoringCase($expected, $actual, $message = null) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertFileNotEqualsIgnoringCase', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a variable is finite.
     *
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertFinite()
     */
    public function assertFinite($actual, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertFinite', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that a variable is finite.
     *
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertFinite()
     */
    public function tryToAssertFinite($actual, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertFinite', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertFinite and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertFinite()
     */
    public function retryAssertFinite($actual, $message = null) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertFinite', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a value is greater than another value.
     *
     * @param $expected
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertGreaterThan()
     */
    public function assertGreaterThan($expected, $actual, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertGreaterThan', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that a value is greater than another value.
     *
     * @param $expected
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertGreaterThan()
     */
    public function tryToAssertGreaterThan($expected, $actual, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertGreaterThan', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertGreaterThan and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertGreaterThan()
     */
    public function retryAssertGreaterThan($expected, $actual, $message = null) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertGreaterThan', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a value is greater than or equal to another value.
     *
     * @param $expected
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertGreaterThanOrEqual()
     */
    public function assertGreaterThanOrEqual($expected, $actual, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertGreaterThanOrEqual', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that a value is greater than or equal to another value.
     *
     * @param $expected
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertGreaterThanOrEqual()
     */
    public function tryToAssertGreaterThanOrEqual($expected, $actual, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertGreaterThanOrEqual', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertGreaterThanOrEqual and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertGreaterThanOrEqual()
     */
    public function retryAssertGreaterThanOrEqual($expected, $actual, $message = null) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertGreaterThanOrEqual', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a variable is infinite.
     *
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertInfinite()
     */
    public function assertInfinite($actual, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertInfinite', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that a variable is infinite.
     *
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertInfinite()
     */
    public function tryToAssertInfinite($actual, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertInfinite', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertInfinite and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertInfinite()
     */
    public function retryAssertInfinite($actual, $message = null) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertInfinite', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a variable is of a given type.
     *
     * @param $expected
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertInstanceOf()
     */
    public function assertInstanceOf($expected, $actual, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertInstanceOf', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that a variable is of a given type.
     *
     * @param $expected
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertInstanceOf()
     */
    public function tryToAssertInstanceOf($expected, $actual, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertInstanceOf', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertInstanceOf and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertInstanceOf()
     */
    public function retryAssertInstanceOf($expected, $actual, $message = null) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertInstanceOf', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a variable is of type array.
     *
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertIsArray()
     */
    public function assertIsArray($actual, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertIsArray', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that a variable is of type array.
     *
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertIsArray()
     */
    public function tryToAssertIsArray($actual, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertIsArray', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertIsArray and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertIsArray()
     */
    public function retryAssertIsArray($actual, $message = null) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertIsArray', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a variable is of type bool.
     *
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertIsBool()
     */
    public function assertIsBool($actual, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertIsBool', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that a variable is of type bool.
     *
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertIsBool()
     */
    public function tryToAssertIsBool($actual, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertIsBool', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertIsBool and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertIsBool()
     */
    public function retryAssertIsBool($actual, $message = null) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertIsBool', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a variable is of type callable.
     *
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertIsCallable()
     */
    public function assertIsCallable($actual, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertIsCallable', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that a variable is of type callable.
     *
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertIsCallable()
     */
    public function tryToAssertIsCallable($actual, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertIsCallable', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertIsCallable and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertIsCallable()
     */
    public function retryAssertIsCallable($actual, $message = null) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertIsCallable', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a variable is of type resource and is closed.
     *
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertIsClosedResource()
     */
    public function assertIsClosedResource($actual, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertIsClosedResource', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that a variable is of type resource and is closed.
     *
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertIsClosedResource()
     */
    public function tryToAssertIsClosedResource($actual, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertIsClosedResource', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertIsClosedResource and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertIsClosedResource()
     */
    public function retryAssertIsClosedResource($actual, $message = null) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertIsClosedResource', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a variable is of type float.
     *
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertIsFloat()
     */
    public function assertIsFloat($actual, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertIsFloat', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that a variable is of type float.
     *
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertIsFloat()
     */
    public function tryToAssertIsFloat($actual, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertIsFloat', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertIsFloat and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertIsFloat()
     */
    public function retryAssertIsFloat($actual, $message = null) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertIsFloat', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a variable is of type int.
     *
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertIsInt()
     */
    public function assertIsInt($actual, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertIsInt', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that a variable is of type int.
     *
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertIsInt()
     */
    public function tryToAssertIsInt($actual, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertIsInt', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertIsInt and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertIsInt()
     */
    public function retryAssertIsInt($actual, $message = null) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertIsInt', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a variable is of type iterable.
     *
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertIsIterable()
     */
    public function assertIsIterable($actual, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertIsIterable', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that a variable is of type iterable.
     *
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertIsIterable()
     */
    public function tryToAssertIsIterable($actual, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertIsIterable', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertIsIterable and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertIsIterable()
     */
    public function retryAssertIsIterable($actual, $message = null) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertIsIterable', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a variable is not of type array.
     *
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertIsNotArray()
     */
    public function assertIsNotArray($actual, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertIsNotArray', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that a variable is not of type array.
     *
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertIsNotArray()
     */
    public function tryToAssertIsNotArray($actual, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertIsNotArray', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertIsNotArray and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertIsNotArray()
     */
    public function retryAssertIsNotArray($actual, $message = null) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertIsNotArray', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a variable is not of type bool.
     *
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertIsNotBool()
     */
    public function assertIsNotBool($actual, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertIsNotBool', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that a variable is not of type bool.
     *
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertIsNotBool()
     */
    public function tryToAssertIsNotBool($actual, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertIsNotBool', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertIsNotBool and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertIsNotBool()
     */
    public function retryAssertIsNotBool($actual, $message = null) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertIsNotBool', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a variable is not of type callable.
     *
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertIsNotCallable()
     */
    public function assertIsNotCallable($actual, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertIsNotCallable', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that a variable is not of type callable.
     *
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertIsNotCallable()
     */
    public function tryToAssertIsNotCallable($actual, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertIsNotCallable', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertIsNotCallable and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertIsNotCallable()
     */
    public function retryAssertIsNotCallable($actual, $message = null) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertIsNotCallable', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a variable is not of type resource.
     *
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertIsNotClosedResource()
     */
    public function assertIsNotClosedResource($actual, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertIsNotClosedResource', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that a variable is not of type resource.
     *
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertIsNotClosedResource()
     */
    public function tryToAssertIsNotClosedResource($actual, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertIsNotClosedResource', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertIsNotClosedResource and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertIsNotClosedResource()
     */
    public function retryAssertIsNotClosedResource($actual, $message = null) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertIsNotClosedResource', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a variable is not of type float.
     *
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertIsNotFloat()
     */
    public function assertIsNotFloat($actual, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertIsNotFloat', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that a variable is not of type float.
     *
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertIsNotFloat()
     */
    public function tryToAssertIsNotFloat($actual, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertIsNotFloat', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertIsNotFloat and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertIsNotFloat()
     */
    public function retryAssertIsNotFloat($actual, $message = null) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertIsNotFloat', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a variable is not of type int.
     *
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertIsNotInt()
     */
    public function assertIsNotInt($actual, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertIsNotInt', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that a variable is not of type int.
     *
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertIsNotInt()
     */
    public function tryToAssertIsNotInt($actual, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertIsNotInt', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertIsNotInt and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertIsNotInt()
     */
    public function retryAssertIsNotInt($actual, $message = null) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertIsNotInt', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a variable is not of type iterable.
     *
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertIsNotIterable()
     */
    public function assertIsNotIterable($actual, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertIsNotIterable', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that a variable is not of type iterable.
     *
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertIsNotIterable()
     */
    public function tryToAssertIsNotIterable($actual, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertIsNotIterable', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertIsNotIterable and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertIsNotIterable()
     */
    public function retryAssertIsNotIterable($actual, $message = null) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertIsNotIterable', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a variable is not of type numeric.
     *
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertIsNotNumeric()
     */
    public function assertIsNotNumeric($actual, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertIsNotNumeric', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that a variable is not of type numeric.
     *
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertIsNotNumeric()
     */
    public function tryToAssertIsNotNumeric($actual, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertIsNotNumeric', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertIsNotNumeric and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertIsNotNumeric()
     */
    public function retryAssertIsNotNumeric($actual, $message = null) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertIsNotNumeric', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a variable is not of type object.
     *
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertIsNotObject()
     */
    public function assertIsNotObject($actual, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertIsNotObject', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that a variable is not of type object.
     *
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertIsNotObject()
     */
    public function tryToAssertIsNotObject($actual, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertIsNotObject', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertIsNotObject and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertIsNotObject()
     */
    public function retryAssertIsNotObject($actual, $message = null) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertIsNotObject', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a file/dir exists and is not readable.
     *
     * @param string $filename
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertIsNotReadable()
     */
    public function assertIsNotReadable($filename, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertIsNotReadable', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that a file/dir exists and is not readable.
     *
     * @param string $filename
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertIsNotReadable()
     */
    public function tryToAssertIsNotReadable($filename, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertIsNotReadable', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertIsNotReadable and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertIsNotReadable()
     */
    public function retryAssertIsNotReadable($filename, $message = null) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertIsNotReadable', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a variable is not of type resource.
     *
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertIsNotResource()
     */
    public function assertIsNotResource($actual, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertIsNotResource', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that a variable is not of type resource.
     *
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertIsNotResource()
     */
    public function tryToAssertIsNotResource($actual, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertIsNotResource', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertIsNotResource and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertIsNotResource()
     */
    public function retryAssertIsNotResource($actual, $message = null) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertIsNotResource', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a variable is not of type scalar.
     *
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertIsNotScalar()
     */
    public function assertIsNotScalar($actual, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertIsNotScalar', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that a variable is not of type scalar.
     *
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertIsNotScalar()
     */
    public function tryToAssertIsNotScalar($actual, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertIsNotScalar', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertIsNotScalar and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertIsNotScalar()
     */
    public function retryAssertIsNotScalar($actual, $message = null) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertIsNotScalar', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a variable is not of type string.
     *
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertIsNotString()
     */
    public function assertIsNotString($actual, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertIsNotString', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that a variable is not of type string.
     *
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertIsNotString()
     */
    public function tryToAssertIsNotString($actual, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertIsNotString', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertIsNotString and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertIsNotString()
     */
    public function retryAssertIsNotString($actual, $message = null) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertIsNotString', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a file/dir exists and is not writable.
     *
     * @param $filename
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertIsNotWritable()
     */
    public function assertIsNotWritable($filename, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertIsNotWritable', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that a file/dir exists and is not writable.
     *
     * @param $filename
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertIsNotWritable()
     */
    public function tryToAssertIsNotWritable($filename, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertIsNotWritable', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertIsNotWritable and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertIsNotWritable()
     */
    public function retryAssertIsNotWritable($filename, $message = null) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertIsNotWritable', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a variable is of type numeric.
     *
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertIsNumeric()
     */
    public function assertIsNumeric($actual, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertIsNumeric', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that a variable is of type numeric.
     *
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertIsNumeric()
     */
    public function tryToAssertIsNumeric($actual, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertIsNumeric', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertIsNumeric and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertIsNumeric()
     */
    public function retryAssertIsNumeric($actual, $message = null) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertIsNumeric', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a variable is of type object.
     *
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertIsObject()
     */
    public function assertIsObject($actual, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertIsObject', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that a variable is of type object.
     *
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertIsObject()
     */
    public function tryToAssertIsObject($actual, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertIsObject', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertIsObject and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertIsObject()
     */
    public function retryAssertIsObject($actual, $message = null) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertIsObject', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a file/dir is readable.
     *
     * @param $filename
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertIsReadable()
     */
    public function assertIsReadable($filename, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertIsReadable', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that a file/dir is readable.
     *
     * @param $filename
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertIsReadable()
     */
    public function tryToAssertIsReadable($filename, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertIsReadable', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertIsReadable and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertIsReadable()
     */
    public function retryAssertIsReadable($filename, $message = null) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertIsReadable', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a variable is of type resource.
     *
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertIsResource()
     */
    public function assertIsResource($actual, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertIsResource', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that a variable is of type resource.
     *
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertIsResource()
     */
    public function tryToAssertIsResource($actual, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertIsResource', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertIsResource and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertIsResource()
     */
    public function retryAssertIsResource($actual, $message = null) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertIsResource', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a variable is of type scalar.
     *
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertIsScalar()
     */
    public function assertIsScalar($actual, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertIsScalar', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that a variable is of type scalar.
     *
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertIsScalar()
     */
    public function tryToAssertIsScalar($actual, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertIsScalar', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertIsScalar and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertIsScalar()
     */
    public function retryAssertIsScalar($actual, $message = null) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertIsScalar', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a variable is of type string.
     *
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertIsString()
     */
    public function assertIsString($actual, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertIsString', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that a variable is of type string.
     *
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertIsString()
     */
    public function tryToAssertIsString($actual, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertIsString', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertIsString and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertIsString()
     */
    public function retryAssertIsString($actual, $message = null) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertIsString', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a file/dir exists and is writable.
     *
     * @param $filename
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertIsWritable()
     */
    public function assertIsWritable($filename, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertIsWritable', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that a file/dir exists and is writable.
     *
     * @param $filename
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertIsWritable()
     */
    public function tryToAssertIsWritable($filename, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertIsWritable', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertIsWritable and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertIsWritable()
     */
    public function retryAssertIsWritable($filename, $message = null) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertIsWritable', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a string is a valid JSON string.
     *
     * @param string $actualJson
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertJson()
     */
    public function assertJson($actualJson, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertJson', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that a string is a valid JSON string.
     *
     * @param string $actualJson
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertJson()
     */
    public function tryToAssertJson($actualJson, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertJson', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertJson and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertJson()
     */
    public function retryAssertJson($actualJson, $message = null) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertJson', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that two JSON files are equal.
     *
     * @param string $expectedFile
     * @param string $actualFile
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertJsonFileEqualsJsonFile()
     */
    public function assertJsonFileEqualsJsonFile($expectedFile, $actualFile, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertJsonFileEqualsJsonFile', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that two JSON files are equal.
     *
     * @param string $expectedFile
     * @param string $actualFile
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertJsonFileEqualsJsonFile()
     */
    public function tryToAssertJsonFileEqualsJsonFile($expectedFile, $actualFile, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertJsonFileEqualsJsonFile', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertJsonFileEqualsJsonFile and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertJsonFileEqualsJsonFile()
     */
    public function retryAssertJsonFileEqualsJsonFile($expectedFile, $actualFile, $message = null) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertJsonFileEqualsJsonFile', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that two JSON files are not equal.
     *
     * @param string $expectedFile
     * @param string $actualFile
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertJsonFileNotEqualsJsonFile()
     */
    public function assertJsonFileNotEqualsJsonFile($expectedFile, $actualFile, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertJsonFileNotEqualsJsonFile', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that two JSON files are not equal.
     *
     * @param string $expectedFile
     * @param string $actualFile
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertJsonFileNotEqualsJsonFile()
     */
    public function tryToAssertJsonFileNotEqualsJsonFile($expectedFile, $actualFile, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertJsonFileNotEqualsJsonFile', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertJsonFileNotEqualsJsonFile and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertJsonFileNotEqualsJsonFile()
     */
    public function retryAssertJsonFileNotEqualsJsonFile($expectedFile, $actualFile, $message = null) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertJsonFileNotEqualsJsonFile', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that the generated JSON encoded object and the content of the given file are equal.
     *
     * @param string $expectedFile
     * @param string $actualJson
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertJsonStringEqualsJsonFile()
     */
    public function assertJsonStringEqualsJsonFile($expectedFile, $actualJson, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertJsonStringEqualsJsonFile', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that the generated JSON encoded object and the content of the given file are equal.
     *
     * @param string $expectedFile
     * @param string $actualJson
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertJsonStringEqualsJsonFile()
     */
    public function tryToAssertJsonStringEqualsJsonFile($expectedFile, $actualJson, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertJsonStringEqualsJsonFile', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertJsonStringEqualsJsonFile and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertJsonStringEqualsJsonFile()
     */
    public function retryAssertJsonStringEqualsJsonFile($expectedFile, $actualJson, $message = null) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertJsonStringEqualsJsonFile', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that two given JSON encoded objects or arrays are equal.
     *
     * @param string $expectedJson
     * @param string $actualJson
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertJsonStringEqualsJsonString()
     */
    public function assertJsonStringEqualsJsonString($expectedJson, $actualJson, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertJsonStringEqualsJsonString', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that two given JSON encoded objects or arrays are equal.
     *
     * @param string $expectedJson
     * @param string $actualJson
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertJsonStringEqualsJsonString()
     */
    public function tryToAssertJsonStringEqualsJsonString($expectedJson, $actualJson, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertJsonStringEqualsJsonString', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertJsonStringEqualsJsonString and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertJsonStringEqualsJsonString()
     */
    public function retryAssertJsonStringEqualsJsonString($expectedJson, $actualJson, $message = null) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertJsonStringEqualsJsonString', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that the generated JSON encoded object and the content of the given file are not equal.
     *
     * @param string $expectedFile
     * @param string $actualJson
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertJsonStringNotEqualsJsonFile()
     */
    public function assertJsonStringNotEqualsJsonFile($expectedFile, $actualJson, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertJsonStringNotEqualsJsonFile', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that the generated JSON encoded object and the content of the given file are not equal.
     *
     * @param string $expectedFile
     * @param string $actualJson
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertJsonStringNotEqualsJsonFile()
     */
    public function tryToAssertJsonStringNotEqualsJsonFile($expectedFile, $actualJson, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertJsonStringNotEqualsJsonFile', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertJsonStringNotEqualsJsonFile and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertJsonStringNotEqualsJsonFile()
     */
    public function retryAssertJsonStringNotEqualsJsonFile($expectedFile, $actualJson, $message = null) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertJsonStringNotEqualsJsonFile', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that two given JSON encoded objects or arrays are not equal.
     *
     * @param string $expectedJson
     * @param string $actualJson
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertJsonStringNotEqualsJsonString()
     */
    public function assertJsonStringNotEqualsJsonString($expectedJson, $actualJson, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertJsonStringNotEqualsJsonString', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that two given JSON encoded objects or arrays are not equal.
     *
     * @param string $expectedJson
     * @param string $actualJson
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertJsonStringNotEqualsJsonString()
     */
    public function tryToAssertJsonStringNotEqualsJsonString($expectedJson, $actualJson, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertJsonStringNotEqualsJsonString', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertJsonStringNotEqualsJsonString and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertJsonStringNotEqualsJsonString()
     */
    public function retryAssertJsonStringNotEqualsJsonString($expectedJson, $actualJson, $message = null) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertJsonStringNotEqualsJsonString', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a value is smaller than another value.
     *
     * @param $expected
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertLessThan()
     */
    public function assertLessThan($expected, $actual, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertLessThan', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that a value is smaller than another value.
     *
     * @param $expected
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertLessThan()
     */
    public function tryToAssertLessThan($expected, $actual, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertLessThan', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertLessThan and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertLessThan()
     */
    public function retryAssertLessThan($expected, $actual, $message = null) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertLessThan', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a value is smaller than or equal to another value.
     *
     * @param $expected
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertLessThanOrEqual()
     */
    public function assertLessThanOrEqual($expected, $actual, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertLessThanOrEqual', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that a value is smaller than or equal to another value.
     *
     * @param $expected
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertLessThanOrEqual()
     */
    public function tryToAssertLessThanOrEqual($expected, $actual, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertLessThanOrEqual', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertLessThanOrEqual and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertLessThanOrEqual()
     */
    public function retryAssertLessThanOrEqual($expected, $actual, $message = null) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertLessThanOrEqual', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a string matches a given regular expression.
     *
     * @param string $pattern
     * @param string $string
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertMatchesRegularExpression()
     */
    public function assertMatchesRegularExpression($pattern, $string, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertMatchesRegularExpression', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that a string matches a given regular expression.
     *
     * @param string $pattern
     * @param string $string
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertMatchesRegularExpression()
     */
    public function tryToAssertMatchesRegularExpression($pattern, $string, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertMatchesRegularExpression', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertMatchesRegularExpression and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertMatchesRegularExpression()
     */
    public function retryAssertMatchesRegularExpression($pattern, $string, $message = null) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertMatchesRegularExpression', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a variable is nan.
     *
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertNan()
     */
    public function assertNan($actual, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertNan', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that a variable is nan.
     *
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertNan()
     */
    public function tryToAssertNan($actual, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertNan', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertNan and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertNan()
     */
    public function retryAssertNan($actual, $message = null) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertNan', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a haystack does not contain a needle.
     *
     * @param $needle
     * @param $haystack
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertNotContains()
     */
    public function assertNotContains($needle, $haystack, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertNotContains', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that a haystack does not contain a needle.
     *
     * @param $needle
     * @param $haystack
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertNotContains()
     */
    public function tryToAssertNotContains($needle, $haystack, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertNotContains', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertNotContains and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertNotContains()
     */
    public function retryAssertNotContains($needle, $haystack, $message = null) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertNotContains', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     *
     * @see \Codeception\Module\AbstractAsserts::assertNotContainsEquals()
     */
    public function assertNotContainsEquals($needle, $haystack, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertNotContainsEquals', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     *
     * @see \Codeception\Module\AbstractAsserts::assertNotContainsEquals()
     */
    public function tryToAssertNotContainsEquals($needle, $haystack, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertNotContainsEquals', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertNotContainsEquals and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertNotContainsEquals()
     */
    public function retryAssertNotContainsEquals($needle, $haystack, $message = null) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertNotContainsEquals', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a haystack does not contain only values of a given type.
     *
     * @param string $type
     * @param $haystack
     * @param bool|null $isNativeType
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertNotContainsOnly()
     */
    public function assertNotContainsOnly($type, $haystack, $isNativeType = null, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertNotContainsOnly', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that a haystack does not contain only values of a given type.
     *
     * @param string $type
     * @param $haystack
     * @param bool|null $isNativeType
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertNotContainsOnly()
     */
    public function tryToAssertNotContainsOnly($type, $haystack, $isNativeType = null, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertNotContainsOnly', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertNotContainsOnly and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertNotContainsOnly()
     */
    public function retryAssertNotContainsOnly($type, $haystack, $isNativeType = null, $message = null) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertNotContainsOnly', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts the number of elements of an array, Countable or Traversable.
     *
     * @param int $expectedCount
     * @param Countable|iterable $haystack
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertNotCount()
     */
    public function assertNotCount($expectedCount, $haystack, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertNotCount', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts the number of elements of an array, Countable or Traversable.
     *
     * @param int $expectedCount
     * @param Countable|iterable $haystack
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertNotCount()
     */
    public function tryToAssertNotCount($expectedCount, $haystack, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertNotCount', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertNotCount and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertNotCount()
     */
    public function retryAssertNotCount($expectedCount, $haystack, $message = null) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertNotCount', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a variable is not empty.
     *
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertNotEmpty()
     */
    public function assertNotEmpty($actual, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertNotEmpty', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that a variable is not empty.
     *
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertNotEmpty()
     */
    public function tryToAssertNotEmpty($actual, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertNotEmpty', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertNotEmpty and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertNotEmpty()
     */
    public function retryAssertNotEmpty($actual, $message = null) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertNotEmpty', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that two variables are not equal.
     *
     * @param $expected
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertNotEquals()
     */
    public function assertNotEquals($expected, $actual, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertNotEquals', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that two variables are not equal.
     *
     * @param $expected
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertNotEquals()
     */
    public function tryToAssertNotEquals($expected, $actual, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertNotEquals', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertNotEquals and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertNotEquals()
     */
    public function retryAssertNotEquals($expected, $actual, $message = null) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertNotEquals', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that two variables are not equal (canonicalizing).
     *
     * @param $expected
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertNotEqualsCanonicalizing()
     */
    public function assertNotEqualsCanonicalizing($expected, $actual, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertNotEqualsCanonicalizing', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that two variables are not equal (canonicalizing).
     *
     * @param $expected
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertNotEqualsCanonicalizing()
     */
    public function tryToAssertNotEqualsCanonicalizing($expected, $actual, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertNotEqualsCanonicalizing', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertNotEqualsCanonicalizing and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertNotEqualsCanonicalizing()
     */
    public function retryAssertNotEqualsCanonicalizing($expected, $actual, $message = null) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertNotEqualsCanonicalizing', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that two variables are not equal (ignoring case).
     *
     * @param $expected
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertNotEqualsIgnoringCase()
     */
    public function assertNotEqualsIgnoringCase($expected, $actual, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertNotEqualsIgnoringCase', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that two variables are not equal (ignoring case).
     *
     * @param $expected
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertNotEqualsIgnoringCase()
     */
    public function tryToAssertNotEqualsIgnoringCase($expected, $actual, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertNotEqualsIgnoringCase', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertNotEqualsIgnoringCase and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertNotEqualsIgnoringCase()
     */
    public function retryAssertNotEqualsIgnoringCase($expected, $actual, $message = null) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertNotEqualsIgnoringCase', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that two variables are not equal (with delta).
     *
     * @param $expected
     * @param $actual
     * @param float $delta
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertNotEqualsWithDelta()
     */
    public function assertNotEqualsWithDelta($expected, $actual, $delta, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertNotEqualsWithDelta', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that two variables are not equal (with delta).
     *
     * @param $expected
     * @param $actual
     * @param float $delta
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertNotEqualsWithDelta()
     */
    public function tryToAssertNotEqualsWithDelta($expected, $actual, $delta, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertNotEqualsWithDelta', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertNotEqualsWithDelta and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertNotEqualsWithDelta()
     */
    public function retryAssertNotEqualsWithDelta($expected, $actual, $delta, $message = null) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertNotEqualsWithDelta', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a condition is not false.
     *
     * @param $condition
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertNotFalse()
     */
    public function assertNotFalse($condition, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertNotFalse', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that a condition is not false.
     *
     * @param $condition
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertNotFalse()
     */
    public function tryToAssertNotFalse($condition, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertNotFalse', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertNotFalse and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertNotFalse()
     */
    public function retryAssertNotFalse($condition, $message = null) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertNotFalse', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a variable is not of a given type.
     *
     * @param $expected
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertNotInstanceOf()
     */
    public function assertNotInstanceOf($expected, $actual, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertNotInstanceOf', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that a variable is not of a given type.
     *
     * @param $expected
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertNotInstanceOf()
     */
    public function tryToAssertNotInstanceOf($expected, $actual, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertNotInstanceOf', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertNotInstanceOf and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertNotInstanceOf()
     */
    public function retryAssertNotInstanceOf($expected, $actual, $message = null) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertNotInstanceOf', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a variable is not null.
     *
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertNotNull()
     */
    public function assertNotNull($actual, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertNotNull', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that a variable is not null.
     *
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertNotNull()
     */
    public function tryToAssertNotNull($actual, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertNotNull', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertNotNull and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertNotNull()
     */
    public function retryAssertNotNull($actual, $message = null) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertNotNull', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that two variables do not have the same type and value.
     *
     * @param $expected
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertNotSame()
     */
    public function assertNotSame($expected, $actual, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertNotSame', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that two variables do not have the same type and value.
     *
     * @param $expected
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertNotSame()
     */
    public function tryToAssertNotSame($expected, $actual, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertNotSame', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertNotSame and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertNotSame()
     */
    public function retryAssertNotSame($expected, $actual, $message = null) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertNotSame', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Assert that the size of two arrays (or `Countable` or `Traversable` objects) is not the same.
     *
     * @param Countable|iterable $expected
     * @param Countable|iterable $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertNotSameSize()
     */
    public function assertNotSameSize($expected, $actual, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertNotSameSize', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Assert that the size of two arrays (or `Countable` or `Traversable` objects) is not the same.
     *
     * @param Countable|iterable $expected
     * @param Countable|iterable $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertNotSameSize()
     */
    public function tryToAssertNotSameSize($expected, $actual, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertNotSameSize', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertNotSameSize and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertNotSameSize()
     */
    public function retryAssertNotSameSize($expected, $actual, $message = null) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertNotSameSize', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a condition is not true.
     *
     * @param $condition
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertNotTrue()
     */
    public function assertNotTrue($condition, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertNotTrue', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that a condition is not true.
     *
     * @param $condition
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertNotTrue()
     */
    public function tryToAssertNotTrue($condition, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertNotTrue', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertNotTrue and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertNotTrue()
     */
    public function retryAssertNotTrue($condition, $message = null) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertNotTrue', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a variable is null.
     *
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertNull()
     */
    public function assertNull($actual, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertNull', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that a variable is null.
     *
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertNull()
     */
    public function tryToAssertNull($actual, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertNull', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertNull and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertNull()
     */
    public function retryAssertNull($actual, $message = null) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertNull', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that an object has a specified attribute.
     *
     * @param string $attributeName
     * @param object $object
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertObjectHasAttribute()
     */
    public function assertObjectHasAttribute($attributeName, $object, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertObjectHasAttribute', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that an object has a specified attribute.
     *
     * @param string $attributeName
     * @param object $object
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertObjectHasAttribute()
     */
    public function tryToAssertObjectHasAttribute($attributeName, $object, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertObjectHasAttribute', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertObjectHasAttribute and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertObjectHasAttribute()
     */
    public function retryAssertObjectHasAttribute($attributeName, $object, $message = null) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertObjectHasAttribute', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that an object does not have a specified attribute.
     *
     * @param string $attributeName
     * @param object $object
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertObjectNotHasAttribute()
     */
    public function assertObjectNotHasAttribute($attributeName, $object, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertObjectNotHasAttribute', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that an object does not have a specified attribute.
     *
     * @param string $attributeName
     * @param object $object
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertObjectNotHasAttribute()
     */
    public function tryToAssertObjectNotHasAttribute($attributeName, $object, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertObjectNotHasAttribute', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertObjectNotHasAttribute and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertObjectNotHasAttribute()
     */
    public function retryAssertObjectNotHasAttribute($attributeName, $object, $message = null) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertObjectNotHasAttribute', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that two variables have the same type and value.
     *
     * @param $expected
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertSame()
     */
    public function assertSame($expected, $actual, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertSame', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that two variables have the same type and value.
     *
     * @param $expected
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertSame()
     */
    public function tryToAssertSame($expected, $actual, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertSame', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertSame and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertSame()
     */
    public function retryAssertSame($expected, $actual, $message = null) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertSame', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Assert that the size of two arrays (or `Countable` or `Traversable` objects) is the same.
     *
     * @param Countable|iterable $expected
     * @param Countable|iterable $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertSameSize()
     */
    public function assertSameSize($expected, $actual, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertSameSize', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Assert that the size of two arrays (or `Countable` or `Traversable` objects) is the same.
     *
     * @param Countable|iterable $expected
     * @param Countable|iterable $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertSameSize()
     */
    public function tryToAssertSameSize($expected, $actual, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertSameSize', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertSameSize and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertSameSize()
     */
    public function retryAssertSameSize($expected, $actual, $message = null) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertSameSize', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param string $needle
     * @param string $haystack
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertStringContainsString()
     */
    public function assertStringContainsString($needle, $haystack, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertStringContainsString', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * @param string $needle
     * @param string $haystack
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertStringContainsString()
     */
    public function tryToAssertStringContainsString($needle, $haystack, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertStringContainsString', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertStringContainsString and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertStringContainsString()
     */
    public function retryAssertStringContainsString($needle, $haystack, $message = null) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertStringContainsString', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     *
     * @see \Codeception\Module\AbstractAsserts::assertStringContainsStringIgnoringCase()
     */
    public function assertStringContainsStringIgnoringCase($needle, $haystack, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertStringContainsStringIgnoringCase', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     *
     * @see \Codeception\Module\AbstractAsserts::assertStringContainsStringIgnoringCase()
     */
    public function tryToAssertStringContainsStringIgnoringCase($needle, $haystack, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertStringContainsStringIgnoringCase', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertStringContainsStringIgnoringCase and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertStringContainsStringIgnoringCase()
     */
    public function retryAssertStringContainsStringIgnoringCase($needle, $haystack, $message = null) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertStringContainsStringIgnoringCase', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a string ends not with a given suffix.
     *
     * @param string $suffix
     * @param string $string
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertStringEndsNotWith()
     */
    public function assertStringEndsNotWith($suffix, $string, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertStringEndsNotWith', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that a string ends not with a given suffix.
     *
     * @param string $suffix
     * @param string $string
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertStringEndsNotWith()
     */
    public function tryToAssertStringEndsNotWith($suffix, $string, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertStringEndsNotWith', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertStringEndsNotWith and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertStringEndsNotWith()
     */
    public function retryAssertStringEndsNotWith($suffix, $string, $message = null) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertStringEndsNotWith', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a string ends with a given suffix.
     *
     * @param string $suffix
     * @param string $string
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertStringEndsWith()
     */
    public function assertStringEndsWith($suffix, $string, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertStringEndsWith', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that a string ends with a given suffix.
     *
     * @param string $suffix
     * @param string $string
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertStringEndsWith()
     */
    public function tryToAssertStringEndsWith($suffix, $string, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertStringEndsWith', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertStringEndsWith and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertStringEndsWith()
     */
    public function retryAssertStringEndsWith($suffix, $string, $message = null) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertStringEndsWith', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that the contents of a string is equal to the contents of a file.
     *
     * @param string $expectedFile
     * @param string $actualString
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertStringEqualsFile()
     */
    public function assertStringEqualsFile($expectedFile, $actualString, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertStringEqualsFile', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that the contents of a string is equal to the contents of a file.
     *
     * @param string $expectedFile
     * @param string $actualString
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertStringEqualsFile()
     */
    public function tryToAssertStringEqualsFile($expectedFile, $actualString, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertStringEqualsFile', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertStringEqualsFile and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertStringEqualsFile()
     */
    public function retryAssertStringEqualsFile($expectedFile, $actualString, $message = null) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertStringEqualsFile', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that the contents of a string is equal to the contents of a file (canonicalizing).
     *
     * @param string $expectedFile
     * @param string $actualString
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertStringEqualsFileCanonicalizing()
     */
    public function assertStringEqualsFileCanonicalizing($expectedFile, $actualString, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertStringEqualsFileCanonicalizing', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that the contents of a string is equal to the contents of a file (canonicalizing).
     *
     * @param string $expectedFile
     * @param string $actualString
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertStringEqualsFileCanonicalizing()
     */
    public function tryToAssertStringEqualsFileCanonicalizing($expectedFile, $actualString, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertStringEqualsFileCanonicalizing', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertStringEqualsFileCanonicalizing and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertStringEqualsFileCanonicalizing()
     */
    public function retryAssertStringEqualsFileCanonicalizing($expectedFile, $actualString, $message = null) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertStringEqualsFileCanonicalizing', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that the contents of a string is equal to the contents of a file (ignoring case).
     *
     * @param string $expectedFile
     * @param string $actualString
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertStringEqualsFileIgnoringCase()
     */
    public function assertStringEqualsFileIgnoringCase($expectedFile, $actualString, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertStringEqualsFileIgnoringCase', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that the contents of a string is equal to the contents of a file (ignoring case).
     *
     * @param string $expectedFile
     * @param string $actualString
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertStringEqualsFileIgnoringCase()
     */
    public function tryToAssertStringEqualsFileIgnoringCase($expectedFile, $actualString, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertStringEqualsFileIgnoringCase', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertStringEqualsFileIgnoringCase and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertStringEqualsFileIgnoringCase()
     */
    public function retryAssertStringEqualsFileIgnoringCase($expectedFile, $actualString, $message = null) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertStringEqualsFileIgnoringCase', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a string matches a given format string.
     *
     * @param string $format
     * @param string $string
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertStringMatchesFormat()
     */
    public function assertStringMatchesFormat($format, $string, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertStringMatchesFormat', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that a string matches a given format string.
     *
     * @param string $format
     * @param string $string
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertStringMatchesFormat()
     */
    public function tryToAssertStringMatchesFormat($format, $string, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertStringMatchesFormat', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertStringMatchesFormat and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertStringMatchesFormat()
     */
    public function retryAssertStringMatchesFormat($format, $string, $message = null) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertStringMatchesFormat', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a string matches a given format file.
     *
     * @param string $formatFile
     * @param string $string
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertStringMatchesFormatFile()
     */
    public function assertStringMatchesFormatFile($formatFile, $string, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertStringMatchesFormatFile', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that a string matches a given format file.
     *
     * @param string $formatFile
     * @param string $string
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertStringMatchesFormatFile()
     */
    public function tryToAssertStringMatchesFormatFile($formatFile, $string, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertStringMatchesFormatFile', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertStringMatchesFormatFile and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertStringMatchesFormatFile()
     */
    public function retryAssertStringMatchesFormatFile($formatFile, $string, $message = null) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertStringMatchesFormatFile', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param string $needle
     * @param string $haystack
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertStringNotContainsString()
     */
    public function assertStringNotContainsString($needle, $haystack, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertStringNotContainsString', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * @param string $needle
     * @param string $haystack
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertStringNotContainsString()
     */
    public function tryToAssertStringNotContainsString($needle, $haystack, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertStringNotContainsString', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertStringNotContainsString and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertStringNotContainsString()
     */
    public function retryAssertStringNotContainsString($needle, $haystack, $message = null) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertStringNotContainsString', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param string $needle
     * @param string $haystack
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertStringNotContainsStringIgnoringCase()
     */
    public function assertStringNotContainsStringIgnoringCase($needle, $haystack, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertStringNotContainsStringIgnoringCase', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * @param string $needle
     * @param string $haystack
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertStringNotContainsStringIgnoringCase()
     */
    public function tryToAssertStringNotContainsStringIgnoringCase($needle, $haystack, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertStringNotContainsStringIgnoringCase', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertStringNotContainsStringIgnoringCase and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertStringNotContainsStringIgnoringCase()
     */
    public function retryAssertStringNotContainsStringIgnoringCase($needle, $haystack, $message = null) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertStringNotContainsStringIgnoringCase', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that the contents of a string is not equal to the contents of a file.
     *
     * @param string $expectedFile
     * @param string $actualString
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertStringNotEqualsFile()
     */
    public function assertStringNotEqualsFile($expectedFile, $actualString, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertStringNotEqualsFile', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that the contents of a string is not equal to the contents of a file.
     *
     * @param string $expectedFile
     * @param string $actualString
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertStringNotEqualsFile()
     */
    public function tryToAssertStringNotEqualsFile($expectedFile, $actualString, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertStringNotEqualsFile', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertStringNotEqualsFile and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertStringNotEqualsFile()
     */
    public function retryAssertStringNotEqualsFile($expectedFile, $actualString, $message = null) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertStringNotEqualsFile', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that the contents of a string is not equal to the contents of a file (canonicalizing).
     * @param string $expectedFile
     * @param string $actualString
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertStringNotEqualsFileCanonicalizing()
     */
    public function assertStringNotEqualsFileCanonicalizing($expectedFile, $actualString, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertStringNotEqualsFileCanonicalizing', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that the contents of a string is not equal to the contents of a file (canonicalizing).
     * @param string $expectedFile
     * @param string $actualString
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertStringNotEqualsFileCanonicalizing()
     */
    public function tryToAssertStringNotEqualsFileCanonicalizing($expectedFile, $actualString, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertStringNotEqualsFileCanonicalizing', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertStringNotEqualsFileCanonicalizing and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertStringNotEqualsFileCanonicalizing()
     */
    public function retryAssertStringNotEqualsFileCanonicalizing($expectedFile, $actualString, $message = null) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertStringNotEqualsFileCanonicalizing', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that the contents of a string is not equal to the contents of a file (ignoring case).
     *
     * @param string $expectedFile
     * @param string $actualString
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertStringNotEqualsFileIgnoringCase()
     */
    public function assertStringNotEqualsFileIgnoringCase($expectedFile, $actualString, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertStringNotEqualsFileIgnoringCase', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that the contents of a string is not equal to the contents of a file (ignoring case).
     *
     * @param string $expectedFile
     * @param string $actualString
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertStringNotEqualsFileIgnoringCase()
     */
    public function tryToAssertStringNotEqualsFileIgnoringCase($expectedFile, $actualString, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertStringNotEqualsFileIgnoringCase', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertStringNotEqualsFileIgnoringCase and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertStringNotEqualsFileIgnoringCase()
     */
    public function retryAssertStringNotEqualsFileIgnoringCase($expectedFile, $actualString, $message = null) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertStringNotEqualsFileIgnoringCase', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a string does not match a given format string.
     *
     * @param string $format
     * @param string $string
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertStringNotMatchesFormat()
     */
    public function assertStringNotMatchesFormat($format, $string, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertStringNotMatchesFormat', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that a string does not match a given format string.
     *
     * @param string $format
     * @param string $string
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertStringNotMatchesFormat()
     */
    public function tryToAssertStringNotMatchesFormat($format, $string, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertStringNotMatchesFormat', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertStringNotMatchesFormat and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertStringNotMatchesFormat()
     */
    public function retryAssertStringNotMatchesFormat($format, $string, $message = null) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertStringNotMatchesFormat', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a string does not match a given format string.
     *
     * @param string $formatFile
     * @param string $string
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertStringNotMatchesFormatFile()
     */
    public function assertStringNotMatchesFormatFile($formatFile, $string, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertStringNotMatchesFormatFile', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that a string does not match a given format string.
     *
     * @param string $formatFile
     * @param string $string
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertStringNotMatchesFormatFile()
     */
    public function tryToAssertStringNotMatchesFormatFile($formatFile, $string, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertStringNotMatchesFormatFile', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertStringNotMatchesFormatFile and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertStringNotMatchesFormatFile()
     */
    public function retryAssertStringNotMatchesFormatFile($formatFile, $string, $message = null) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertStringNotMatchesFormatFile', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a string starts not with a given prefix.
     *
     * @param string $prefix
     * @param string $string
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertStringStartsNotWith()
     */
    public function assertStringStartsNotWith($prefix, $string, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertStringStartsNotWith', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that a string starts not with a given prefix.
     *
     * @param string $prefix
     * @param string $string
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertStringStartsNotWith()
     */
    public function tryToAssertStringStartsNotWith($prefix, $string, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertStringStartsNotWith', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertStringStartsNotWith and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertStringStartsNotWith()
     */
    public function retryAssertStringStartsNotWith($prefix, $string, $message = null) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertStringStartsNotWith', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a string starts with a given prefix.
     *
     * @param string $prefix
     * @param string $string
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertStringStartsWith()
     */
    public function assertStringStartsWith($prefix, $string, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertStringStartsWith', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that a string starts with a given prefix.
     *
     * @param string $prefix
     * @param string $string
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertStringStartsWith()
     */
    public function tryToAssertStringStartsWith($prefix, $string, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertStringStartsWith', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertStringStartsWith and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertStringStartsWith()
     */
    public function retryAssertStringStartsWith($prefix, $string, $message = null) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertStringStartsWith', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Evaluates a PHPUnit\Framework\Constraint matcher object.
     *
     * @param $value
     * @param Constraint $constraint
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertThat()
     */
    public function assertThat($value, $constraint, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertThat', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Evaluates a PHPUnit\Framework\Constraint matcher object.
     *
     * @param $value
     * @param Constraint $constraint
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertThat()
     */
    public function tryToAssertThat($value, $constraint, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertThat', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertThat and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertThat()
     */
    public function retryAssertThat($value, $constraint, $message = null) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertThat', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a condition is true.
     *
     * @param $condition
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertTrue()
     */
    public function assertTrue($condition, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertTrue', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that a condition is true.
     *
     * @param $condition
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertTrue()
     */
    public function tryToAssertTrue($condition, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertTrue', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertTrue and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertTrue()
     */
    public function retryAssertTrue($condition, $message = null) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertTrue', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that two XML files are equal.
     *
     * @param string $expectedFile
     * @param string $actualFile
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertXmlFileEqualsXmlFile()
     */
    public function assertXmlFileEqualsXmlFile($expectedFile, $actualFile, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertXmlFileEqualsXmlFile', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that two XML files are equal.
     *
     * @param string $expectedFile
     * @param string $actualFile
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertXmlFileEqualsXmlFile()
     */
    public function tryToAssertXmlFileEqualsXmlFile($expectedFile, $actualFile, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertXmlFileEqualsXmlFile', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertXmlFileEqualsXmlFile and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertXmlFileEqualsXmlFile()
     */
    public function retryAssertXmlFileEqualsXmlFile($expectedFile, $actualFile, $message = null) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertXmlFileEqualsXmlFile', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that two XML files are not equal.
     *
     * @param string $expectedFile
     * @param string $actualFile
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertXmlFileNotEqualsXmlFile()
     */
    public function assertXmlFileNotEqualsXmlFile($expectedFile, $actualFile, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertXmlFileNotEqualsXmlFile', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that two XML files are not equal.
     *
     * @param string $expectedFile
     * @param string $actualFile
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertXmlFileNotEqualsXmlFile()
     */
    public function tryToAssertXmlFileNotEqualsXmlFile($expectedFile, $actualFile, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertXmlFileNotEqualsXmlFile', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertXmlFileNotEqualsXmlFile and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertXmlFileNotEqualsXmlFile()
     */
    public function retryAssertXmlFileNotEqualsXmlFile($expectedFile, $actualFile, $message = null) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertXmlFileNotEqualsXmlFile', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that two XML documents are equal.
     *
     * @param string $expectedFile
     * @param DOMDocument|string $actualXml
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertXmlStringEqualsXmlFile()
     */
    public function assertXmlStringEqualsXmlFile($expectedFile, $actualXml, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertXmlStringEqualsXmlFile', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that two XML documents are equal.
     *
     * @param string $expectedFile
     * @param DOMDocument|string $actualXml
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertXmlStringEqualsXmlFile()
     */
    public function tryToAssertXmlStringEqualsXmlFile($expectedFile, $actualXml, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertXmlStringEqualsXmlFile', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertXmlStringEqualsXmlFile and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertXmlStringEqualsXmlFile()
     */
    public function retryAssertXmlStringEqualsXmlFile($expectedFile, $actualXml, $message = null) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertXmlStringEqualsXmlFile', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that two XML documents are equal.
     *
     * @param DOMDocument|string $expectedXml
     * @param DOMDocument|string $actualXml
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertXmlStringEqualsXmlString()
     */
    public function assertXmlStringEqualsXmlString($expectedXml, $actualXml, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertXmlStringEqualsXmlString', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that two XML documents are equal.
     *
     * @param DOMDocument|string $expectedXml
     * @param DOMDocument|string $actualXml
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertXmlStringEqualsXmlString()
     */
    public function tryToAssertXmlStringEqualsXmlString($expectedXml, $actualXml, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertXmlStringEqualsXmlString', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertXmlStringEqualsXmlString and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertXmlStringEqualsXmlString()
     */
    public function retryAssertXmlStringEqualsXmlString($expectedXml, $actualXml, $message = null) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertXmlStringEqualsXmlString', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that two XML documents are not equal.
     *
     * @param string $expectedFile
     * @param DOMDocument|string $actualXml
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertXmlStringNotEqualsXmlFile()
     */
    public function assertXmlStringNotEqualsXmlFile($expectedFile, $actualXml, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertXmlStringNotEqualsXmlFile', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that two XML documents are not equal.
     *
     * @param string $expectedFile
     * @param DOMDocument|string $actualXml
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertXmlStringNotEqualsXmlFile()
     */
    public function tryToAssertXmlStringNotEqualsXmlFile($expectedFile, $actualXml, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertXmlStringNotEqualsXmlFile', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertXmlStringNotEqualsXmlFile and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertXmlStringNotEqualsXmlFile()
     */
    public function retryAssertXmlStringNotEqualsXmlFile($expectedFile, $actualXml, $message = null) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertXmlStringNotEqualsXmlFile', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that two XML documents are not equal.
     *
     * @param DOMDocument|string $expectedXml
     * @param DOMDocument|string $actualXml
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertXmlStringNotEqualsXmlString()
     */
    public function assertXmlStringNotEqualsXmlString($expectedXml, $actualXml, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertXmlStringNotEqualsXmlString', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that two XML documents are not equal.
     *
     * @param DOMDocument|string $expectedXml
     * @param DOMDocument|string $actualXml
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertXmlStringNotEqualsXmlString()
     */
    public function tryToAssertXmlStringNotEqualsXmlString($expectedXml, $actualXml, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertXmlStringNotEqualsXmlString', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertXmlStringNotEqualsXmlString and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertXmlStringNotEqualsXmlString()
     */
    public function retryAssertXmlStringNotEqualsXmlString($expectedXml, $actualXml, $message = null) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertXmlStringNotEqualsXmlString', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Fails a test with the given message.
     *
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::fail()
     */
    public function fail($message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('fail', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Fails a test with the given message.
     *
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::fail()
     */
    public function tryToFail($message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('fail', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes fail and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::fail()
     */
    public function retryFail($message = null) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('fail', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Mark the test as incomplete.
     *
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::markTestIncomplete()
     */
    public function markTestIncomplete($message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('markTestIncomplete', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Mark the test as incomplete.
     *
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::markTestIncomplete()
     */
    public function tryToMarkTestIncomplete($message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('markTestIncomplete', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes markTestIncomplete and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::markTestIncomplete()
     */
    public function retryMarkTestIncomplete($message = null) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('markTestIncomplete', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Mark the test as skipped.
     *
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::markTestSkipped()
     */
    public function markTestSkipped($message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('markTestSkipped', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Mark the test as skipped.
     *
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::markTestSkipped()
     */
    public function tryToMarkTestSkipped($message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('markTestSkipped', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes markTestSkipped and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::markTestSkipped()
     */
    public function retryMarkTestSkipped($message = null) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('markTestSkipped', func_get_args(), $retryNum, $retryInterval));
    }
}
